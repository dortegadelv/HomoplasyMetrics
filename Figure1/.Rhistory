qexp(.9, 0.00032*2)*3
qexp(.9, 0.0003188764*2)*3
qexp(.5, 0.0003188764*2)*3
qexp(.95, 0.0003188764*2)*3
qexp(.99, 0.0003188764*2)*3
# Recombination rate in the EPAS1 gene#
#
5.264853e-09*60567#
#
qexp(.5, 0.0003188764*2)*3#
qexp(.9, 0.0003188764*2)*3#
qexp(.95, 0.0003188764*2)*3
18800+32100
50900/2
qexp(.99, 0.0003188764*2)*3
50316/12
48216/12
8.51+32.76+22.62+7.5+8.75+79.23+23.87+8.04+20
8.51+32.76+22.62+7.5+8.75+79.23+23.87+8.04+20+70
43.37+16+10.99
43.37+16
8.51+32.76+22.62+7.5+8.75+79.23+23.87+8.06+20+70+10.19
291.49/2
24.04+7.75+33.87+38.09+35.85+36+129.95+22.34+36.69+11.88+28.56+48+25.75
24.04+33.87+38.09+35.85+36+129.95+22.34+36.69+11.88+28.56+48+25.75
471.02/2
235.51-145.745
129.95+48
177.95/2
1000/28
1200/28
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesTwo <- c()#
TestRemain <- c()#
TestRemainTwo <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, exp(TimeMatrix[3,3]))#
    TestRemainTwo <- c(TestRemainTwo, (1-exp(TimeMatrix[3,3]))*(Matrix[3,2])/-Matrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")
plot(MatExponentiationValues)#
lines(TestRemain,col="red")
plot(MatExponentiationValuesTwo)
Matrix[3,2])/-Matrix[3,3]
Matrix[3,2]/-Matrix[3,3]
plot(MatExponentiationValuesTwo)
lines(TestRemainTwo,col="red")
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemain <- c()#
TestRemainTwo <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, exp(TimeMatrix[3,3]))#
    TestRemainTwo <- c(TestRemainTwo, (1-exp(TimeMatrix[3,3]))*(Matrix[3,2])/-Matrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")
50316/12
41.10+8.20+29.24+58.57+31.77+12.09+6.53+19.56+105+41.62+62+20+26.60+19.99
6.48+5.95
482.27-12.43
41.10+58.57+31.77+105+62
469.84/2
298.44/2
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, 1 - abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, 1 - abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
Dif <- TestRemainThree - Mini
Dif <- TestRemainThree - MiniTest
plot(Dif)
TestRemainThree[1:10]
MiniTest[1:10]
abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)
Time <- 0.004
abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)
1 - abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)
?pexp
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, 1 - exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
Dif <- MatExponentiationValuesThree - MiniTest
plot(Dif)
MiniTest
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
Dif <- MatExponentiationValuesThree - MiniTest
plot(Dif)
Dif <- TestRemainThree - MiniTest
plot(Dif)
library(cubature)
?adaptIntegrate
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot(MatExponentiationValuesThreeToTwo)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, )#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot (MatExponentiationValuesThreeToTwo)
lines(TestRemainThreeToTwo, col = "red")
length(TestRemainThreeToTwo)
length(MatExponentiationValuesThreeToTwo)
Integral
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot (MatExponentiationValuesThreeToTwo)
lines(TestRemainThreeToTwo, col = "red")
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot (MatExponentiationValuesThreeToTwo)
lines(TestRemainThreeToTwo,col="red")
plot(TestRemainThreeToTwo)
plot (MatExponentiationValuesThreeToTwo)
plot(TestRemainThreeToTwo)
plot(MatExponentiationValuesThreeToTwo)
MatrixExponentiation
sum(MatrixExponentiation)
Matrix[2,2]
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)
plot(TestRemainThreeToTwo)
(Matrix[3,2]/(abs(Matrix[3,3])))
Matrix[3,]
1/3
0.5/3
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)
plot (MatExponentiationValuesThreeToTwo)
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
Matrix
Time
i <- 1
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
Dif <- MiniTest - MatExponentiationValuesThree
plot(Dif)
Dif <- MiniTest - TestRemainThree
plot(Dif)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    IntegralTwo <- c(IntegralTwo, Integral2)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot(IntegralTwo)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot (IntegralTwo)
(1 - exp(-abs(Matrix[3,3])*1000*.004))
(Matrix[3,2]/(abs(Matrix[3,3])))
( exp(-abs(Matrix[2,2])*(Time - Time)))
( exp(-abs(Matrix[2,2])*(Time - 0)))
Time
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
Integral
Integral2
Integral3
Integral3*1/6
Integral3$integral*1/6
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
18800+32100
50900/2
500/20
550/20
160+20+50+376+136
550+742
1292/20
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)#
#
plot (MatExponentiationValuesFiveToFour)#
lines (TestRemainFiveToFour, col = "red")
plot (MatExponentiationValuesFiveToFour)#
lines (TestRemainFiveToFour, col = "red")
plot (MatExponentiationValuesFiveToFour - TestRemainFiveToFour)
plot (MatExponentiationValuesThreeToOne)
(0 < 1)
3*(0 < 1)
3*(0 < -1)
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0, 0), upperLimit = c(Time, Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    #    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    #   Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    #   Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is
Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))
Integral3$integral
MatExponentiationValuesThreeToOne$integral
MatExponentiationValuesThreeToOne[1000]
MatExponentiationValuesThreeToOne[100]
Time <- 100*.004
Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))
Integral3$integral
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
Integral3
Integral
?adaptintegrate
?adaptIntegrate
adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-4)
adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree$integral,col="red")
length(IntegralThree$integral)
IntegralThree
lines(IntegralThree,col="red")
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(x[2] - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree,col="red")
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree,col="red")
sum(IntegralThree)
sum(MatExponentiationValuesThreeToOne)
sum(IntegralThree-MatExponentiationValuesThreeToOne)
sum((IntegralThree-MatExponentiationValuesThreeToOne)/MatExponentiationValuesThreeToOne)
sum((MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne)
MatExponentiationValuesThreeToOne[1]
IntegralThree[1]
(MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne
MatExponentiationValuesThreeToOne[1]
(MatExponentiationValuesThreeToOne[1]-IntegralThree[1])/MatExponentiationValuesThreeToOne[1]
sum((MatExponentiationValuesThreeToOne[1]-IntegralThree[1])/MatExponentiationValuesThreeToOne[1])
sum((MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne)
sum((MatExponentiationValuesThreeToOne[600]-IntegralThree[600])/MatExponentiationValuesThreeToOne[600])
sum((MatExponentiationValuesThreeToOne[1:600]-IntegralThree[1:600])/MatExponentiationValuesThreeToOne[1:600])
sum((MatExponentiationValuesThreeToOne[1:400]-IntegralThree[1:400])/MatExponentiationValuesThreeToOne[1:400])
400/17
2740/6
######### Substitute the directory appropriately to read the data!#
############### This R script generates Figure 1 from the paper ################
### Point to the directory containing this script and the data in the MyDir variable#
#
# MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure1"#
#
MyDir <- "/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedDataStepwiseCoalModel.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:10){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:10){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
	for (j in 0:12){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
		}#
		if (j == 4){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(6,2)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
		}#
		if (j == 6){#
## Chance that the six mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
## Chance that you have 3 microsatellites with 2 mutations each#
			Combinations <- comb(6,3)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
		}#
		if (j == 8){#
## Chance that the eight mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
## Chance that you have 4 microsatellites with 2 mutations each#
			Combinations <- comb(6,4)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
		}#
		if (j == 10){#
## Chance that the ten mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
## Chance that you have 5 microsatellites with 2 mutations each#
			Combinations <- comb(6,5)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
		}#
		if (j == 12){#
## Chance that the twelve mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
## Chance that you have 6 microsatellites with 2 mutations each#
			Combinations <- comb(6,6)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
		}#
#		j <- j + 1#
	}#
	return (FSMM)#
}#
#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/6))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
#
    print (j)#
	CumulativeFSMM <- 0#
	CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	ExpectedValue <- 0#
    TotalProb <- 0 + pexp(0.5,1/(N))#
    j <- 1#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
    print (k)#
    }#
	n <- 2#
	TermOne <- 2*((1/(k-1)) - (1/n))#
	TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
	Tij <- Tij + TermOne*TermTwo*2*N#
	NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
	CurrentGens <- TermOne*2*N#
	CurrentTau <- 2 * k * 6 * 5.5e-5#
	if (CurrentTau > KeyTauTimes[j]){#
	CurrentTau <- KeyTauTimes[j]#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/6)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    j <- j +1#
    }else {#
    Probability <- pexp(k + 0.5,1/(N)) - pexp(k - 0.5,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/6)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau)#
    }#
    #	print(CurrentTau)#
    #	print(TermTwo)#
	SumTermTwo <- SumTermTwo + TermTwo#
    if (j==151){#
    break#
    }#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(SimTauTimes,IS_MSH,type="p",ylim=c(0,1),xlim=c(0,15),xlab="Tau",ylab="Fi")#
lines(KeyTauTimes,Theory_IS_MSH,lty=2)#
#
lines(SimTauTimes,SMM_MSH,type="p",col="red")#
lines(KeyTauTimes,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(SimTauTimes,IS_DH,type="p",ylim=c(0,13.5),xlim=c(0,15),xlab="Tau",ylab="pi")#
lines(KeyTauTimes,Theory_IS_DH,lty=2)#
#
lines(SimTauTimes,SMM_DH,type="p",col="red")#
lines(KeyTauTimes,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(SimTauTimes,IS_P,type="p",ylim=c(0,0.9),xlim=c(0,15),xlab="Tau",ylab="F")#
lines(KeyTauTimes,Theory_IS_P,lty=2)#
#
lines(SimTauTimes,SMM_P,type="p",col="red")#
lines(KeyTauTimes,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(SimTauTimes,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(0,15),xlab="Tau",ylab="Homoplasy")#
lines(SimTauTimes,PartialMSH,type="p",col="black")#
lines(SimTauTimes,PartialDH,type="p",col="blue")#
#
lines(KeyTauTimes,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(KeyTauTimes,MSHValues,col="black",lty=2)#
lines(KeyTauTimes,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("Figure1.pdf")#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(SimTauTimes,IS_DH,type="p",ylim=c(0,15),xlab=expression(tau),ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(KeyTauTimes,Theory_IS_DH,lty=2)#
#
lines(SimTauTimes,SMM_DH,type="p",col="red",pch=19)#
lines(KeyTauTimes,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"),cex=1.25)#
plot(SimTauTimes,IS_MSH,type="p",ylim=c(0,1),xlab=expression(tau),ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(KeyTauTimes,Theory_IS_MSH,lty=2)#
#
lines(SimTauTimes,SMM_MSH,type="p",col="red",pch=19)#
lines(KeyTauTimes,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"),cex=1.25)#
plot(SimTauTimes,IS_P,type="p",ylim=c(0,0.3),xlab=expression(tau),ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(KeyTauTimes,Theory_IS_P,lty=2)#
#
lines(SimTauTimes,SMM_P,type="p",col="red",pch=19)#
lines(KeyTauTimes,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"),cex=1.25)#
#
# plot(SimTauTimes,PartialP,type="p",ylim=c(0,1),col="red",xlab="Tau",ylab="Homoplasy",main="D)",pch=19)#
# lines(SimTauTimes,PartialMSH,type="p",col="black",pch=19)#
# lines(SimTauTimes,PartialDH,type="p",col="blue",pch=19)#
#
plot(SimTauTimes,1-IS_P/SMM_P,type="p",ylim=c(0,1),col="red", xlab=expression(tau), ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(SimTauTimes,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(SimTauTimes,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
lines(KeyTauTimes,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(KeyTauTimes,MSHValues,col="black",lty=2)#
lines(KeyTauTimes,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"),cex=1.25)#
dev.off()
######### Substitute the directory appropriately to read the data!#
#
#MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedData.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 croatian random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
    LTimesTwo <- L*2#
	for (j in 0:LTimesTwo){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		else if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
		}#
		else if (j %% 2 == 0){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(L,j/2)#
            Denominator <-factorial(2)#
            JOverTwo <- j/2 - 1#
            Probs <- dbinom(1,2,0.5)#
            for (k in 1:JOverTwo){#
            Denominator <- Denominator * factorial(2)#
            Probs <- Probs * dbinom(1,2,0.5)#
            }#
            #            print(Combinations)#
            #            print(Denominator)#
            #            print(Probs)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(j)/(Denominator))* (1/L)^(j)*Probs#
		}#
        #		j <- j + 1#
	}#
	return (FSMM)#
}#
#
F_smmOriginal = function(time) {#
    CurrentDpois <- 0#
    j <- 0#
    FSMM <- 0#
    for (j in 0:12){#
        CurrentDpois <- ppois(j,time)#
        CurrentProbability <- dpois(j,time)#
        if (j == 0){#
            FSMM <- FSMM + CurrentProbability#
            #			print(FSMM)#
        }#
        if (j == 2){#
            ## Chance that the two mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
        }#
        if (j == 4){#
            ## Chance that the four mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
            ## Chance that we have two mutations, those two on two different microsatellites#
            Combinations <- comb(6,2)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 6){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
            ## Chance that you have 3 microsatellites with 2 mutations each#
            Combinations <- comb(6,3)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 8){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
            ## Chance that you have 4 microsatellites with 2 mutations each#
            Combinations <- comb(6,4)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 10){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
            ## Chance that you have 5 microsatellites with 2 mutations each#
            Combinations <- comb(6,5)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 12){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
            ## Chance that you have 6 microsatellites with 2 mutations each#
            Combinations <- comb(6,6)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
        }#
        #		j <- j + 1#
    }#
    return (FSMM)#
}#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
    #	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time,L){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/L))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_SMM_POriginal <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
L <-6#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
#
    j <- 2#
    L <- j#
	CumulativeFSMM <- 0#
    CumulativeFSMMOriginal <- 0#
    CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	print ("Here")#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
        print (k)#
    }#
#
    n <- 2#
    TermOne <- 2*((1/(k-1)) - (1/n))#
    TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
    Tij <- Tij + TermOne*TermTwo*2*N#
    NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
    CurrentGens <- TermOne*2*N#
    CurrentTau <- 2 * k * 6 * 5.5e-5#
#
	if (CurrentTau > j){#
	CurrentTau <- j#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau,L)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/L)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau,L)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau,L)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    j <- j +1#
#
    }else{#
    Probability <- pexp(k + 0.5,1/(N)) - pexp(k - 0.5,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau,L)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/L)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau,L)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau,L)#
#
    }#
	print(CurrentTau)#
    #	print(TermTwo)#
	CumulativeFSMM <- CumulativeFSMM + TermTwo * F_smm(CurrentTau,L)#
    CumulativeFSMMOriginal <- CumulativeFSMMOriginal + TermTwo * F_smmOriginal (CurrentTau)#
	CumulativeFIS <- CumulativeFIS + TermTwo * exp(-CurrentTau)#
	CumulativeFisSing <-CumulativeFisSing + TermTwo * exp(-CurrentTau/L)#
	CumulativeFsmmSing <- CumulativeFsmmSing + TermTwo * SiteFSMM(CurrentTau,L)#
	CumulativePiis <- CumulativePiis + TermTwo* (CurrentTau)#
	CumulativePsmm <- CumulativePsmm + TermTwo* Pi_SMM(CurrentTau,L)#
	SumTermTwo <- SumTermTwo + TermTwo#
    if (j==11){#
        break#
    }#
#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlim=c(2,10),xlab="Tau",ylab="Fi")#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red")#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_DH,type="p",ylim=c(0,13.5),xlim=c(2,10),xlab="Tau",ylab="pi")#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red")#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_P,type="p",ylim=c(0,0.9),xlim=c(2,10),xlab="Tau",ylab="F")#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red")#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(2:10,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(2,10),xlab="Number of linked SSRs",ylab="Homoplasy")#
lines(2:10,PartialMSH,type="p",col="black")#
lines(2:10,PartialDH,type="p",col="blue")#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("SuppFig1.pdf")#
#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(2:10,IS_DH,type="p",ylim=c(0,13),xlab="Number of linked SSRs",ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlab="Number of linked SSRs",ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_P,type="p",ylim=c(0,0.3),xlab="Number of linked SSRs",ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
#
# plot(2:10,PartialP,type="p",ylim=c(0,0.7),col="red",xlab="Number of loci",ylab="Homoplasy",main="D)",pch=19)#
# lines(2:10,PartialMSH,type="p",col="black",pch=19)#
# lines(2:10,PartialDH,type="p",col="blue",pch=19)#
#
plot(2:10,1-IS_P/SMM_P,type="p",ylim=c(0,0.7),col="red",xlab="Number of linked SSRs",ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(2:10,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"))#
dev.off()
######### Substitute the directory appropriately to read the data!#
#
#MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedData.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 croatian random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
    LTimesTwo <- L*2#
	for (j in 0:LTimesTwo){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		else if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
		}#
		else if (j %% 2 == 0){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(L,j/2)#
            Denominator <-factorial(2)#
            JOverTwo <- j/2 - 1#
            Probs <- dbinom(1,2,0.5)#
            for (k in 1:JOverTwo){#
            Denominator <- Denominator * factorial(2)#
            Probs <- Probs * dbinom(1,2,0.5)#
            }#
            #            print(Combinations)#
            #            print(Denominator)#
            #            print(Probs)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(j)/(Denominator))* (1/L)^(j)*Probs#
		}#
        #		j <- j + 1#
	}#
	return (FSMM)#
}#
#
F_smmOriginal = function(time) {#
    CurrentDpois <- 0#
    j <- 0#
    FSMM <- 0#
    for (j in 0:12){#
        CurrentDpois <- ppois(j,time)#
        CurrentProbability <- dpois(j,time)#
        if (j == 0){#
            FSMM <- FSMM + CurrentProbability#
            #			print(FSMM)#
        }#
        if (j == 2){#
            ## Chance that the two mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
        }#
        if (j == 4){#
            ## Chance that the four mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
            ## Chance that we have two mutations, those two on two different microsatellites#
            Combinations <- comb(6,2)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 6){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
            ## Chance that you have 3 microsatellites with 2 mutations each#
            Combinations <- comb(6,3)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 8){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
            ## Chance that you have 4 microsatellites with 2 mutations each#
            Combinations <- comb(6,4)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 10){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
            ## Chance that you have 5 microsatellites with 2 mutations each#
            Combinations <- comb(6,5)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 12){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
            ## Chance that you have 6 microsatellites with 2 mutations each#
            Combinations <- comb(6,6)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
        }#
        #		j <- j + 1#
    }#
    return (FSMM)#
}#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
    #	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time,L){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/L))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_SMM_POriginal <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
L <-6#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
#
    j <- 2#
    L <- j#
	CumulativeFSMM <- 0#
    CumulativeFSMMOriginal <- 0#
    CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	print ("Here")#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
        print (k)#
    }#
#
    n <- 2#
    TermOne <- 2*((1/(k-1)) - (1/n))#
    TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
    Tij <- Tij + TermOne*TermTwo*2*N#
    NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
    CurrentGens <- TermOne*2*N#
    CurrentTau <- 2 * k * 6 * 5.5e-5#
#
	if (CurrentTau > j){#
	CurrentTau <- j#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau,L)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/L)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau,L)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau,L)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    j <- j +1#
#
    }else{#
    Probability <- pexp(k + 0.5,1/(N)) - pexp(k - 0.5,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau,L)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/L)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau,L)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau,L)#
#
    }#
	print(CurrentTau)#
    #	print(TermTwo)#
	CumulativeFSMM <- CumulativeFSMM + TermTwo * F_smm(CurrentTau,L)#
    CumulativeFSMMOriginal <- CumulativeFSMMOriginal + TermTwo * F_smmOriginal (CurrentTau)#
	CumulativeFIS <- CumulativeFIS + TermTwo * exp(-CurrentTau)#
	CumulativeFisSing <-CumulativeFisSing + TermTwo * exp(-CurrentTau/L)#
	CumulativeFsmmSing <- CumulativeFsmmSing + TermTwo * SiteFSMM(CurrentTau,L)#
	CumulativePiis <- CumulativePiis + TermTwo* (CurrentTau)#
	CumulativePsmm <- CumulativePsmm + TermTwo* Pi_SMM(CurrentTau,L)#
	SumTermTwo <- SumTermTwo + TermTwo#
    if (j==11){#
        break#
    }#
#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlim=c(2,10),xlab="Tau",ylab="Fi")#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red")#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_DH,type="p",ylim=c(0,13.5),xlim=c(2,10),xlab="Tau",ylab="pi")#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red")#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_P,type="p",ylim=c(0,0.9),xlim=c(2,10),xlab="Tau",ylab="F")#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red")#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(2:10,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(2,10),xlab="Number of linked SSRs",ylab="Homoplasy")#
lines(2:10,PartialMSH,type="p",col="black")#
lines(2:10,PartialDH,type="p",col="blue")#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("SuppFig1.pdf")#
#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(2:10,IS_DH,type="p",ylim=c(0,13),xlab="Number of linked SSRs",ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlab="Number of linked SSRs",ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_P,type="p",ylim=c(0,0.3),xlab="Number of linked SSRs",ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
#
# plot(2:10,PartialP,type="p",ylim=c(0,0.7),col="red",xlab="Number of loci",ylab="Homoplasy",main="D)",pch=19)#
# lines(2:10,PartialMSH,type="p",col="black",pch=19)#
# lines(2:10,PartialDH,type="p",col="blue",pch=19)#
#
plot(2:10,1-IS_P/SMM_P,type="p",ylim=c(0,0.7),col="red",xlab="Number of linked SSRs",ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(2:10,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"))#
dev.off()
######### Substitute the directory appropriately to read the data!#
#
#MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedData.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 croatian random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
    LTimesTwo <- L*2#
	for (j in 0:LTimesTwo){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		else if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
		}#
		else if (j %% 2 == 0){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(L,j/2)#
            Denominator <-factorial(2)#
            JOverTwo <- j/2 - 1#
            Probs <- dbinom(1,2,0.5)#
            for (k in 1:JOverTwo){#
            Denominator <- Denominator * factorial(2)#
            Probs <- Probs * dbinom(1,2,0.5)#
            }#
            #            print(Combinations)#
            #            print(Denominator)#
            #            print(Probs)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(j)/(Denominator))* (1/L)^(j)*Probs#
		}#
        #		j <- j + 1#
	}#
	return (FSMM)#
}#
#
F_smmOriginal = function(time) {#
    CurrentDpois <- 0#
    j <- 0#
    FSMM <- 0#
    for (j in 0:12){#
        CurrentDpois <- ppois(j,time)#
        CurrentProbability <- dpois(j,time)#
        if (j == 0){#
            FSMM <- FSMM + CurrentProbability#
            #			print(FSMM)#
        }#
        if (j == 2){#
            ## Chance that the two mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
        }#
        if (j == 4){#
            ## Chance that the four mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
            ## Chance that we have two mutations, those two on two different microsatellites#
            Combinations <- comb(6,2)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 6){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
            ## Chance that you have 3 microsatellites with 2 mutations each#
            Combinations <- comb(6,3)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 8){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
            ## Chance that you have 4 microsatellites with 2 mutations each#
            Combinations <- comb(6,4)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 10){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
            ## Chance that you have 5 microsatellites with 2 mutations each#
            Combinations <- comb(6,5)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 12){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
            ## Chance that you have 6 microsatellites with 2 mutations each#
            Combinations <- comb(6,6)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
        }#
        #		j <- j + 1#
    }#
    return (FSMM)#
}#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
    #	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time,L){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/L))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_SMM_POriginal <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
L <-6#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
#
    j <- 2#
    L <- j#
	CumulativeFSMM <- 0#
    CumulativeFSMMOriginal <- 0#
    CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	print ("Here")#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
        print (k)#
    }#
#
    n <- 2#
    TermOne <- 2*((1/(k-1)) - (1/n))#
    TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
    Tij <- Tij + TermOne*TermTwo*2*N#
    NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
    CurrentGens <- TermOne*2*N#
    CurrentTau <- 2 * k * 6 * 5.5e-5#
#
	if (CurrentTau > j){#
	CurrentTau <- j#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau,L)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/L)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau,L)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau,L)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    j <- j +1#
#
    }else{#
    Probability <- pexp(k + 0.5,1/(N)) - pexp(k - 0.5,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau,L)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/L)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau,L)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau,L)#
#
    }#
    #	print(CurrentTau)#
    #	print(TermTwo)#
	CumulativeFSMM <- CumulativeFSMM + TermTwo * F_smm(CurrentTau,L)#
    CumulativeFSMMOriginal <- CumulativeFSMMOriginal + TermTwo * F_smmOriginal (CurrentTau)#
	CumulativeFIS <- CumulativeFIS + TermTwo * exp(-CurrentTau)#
	CumulativeFisSing <-CumulativeFisSing + TermTwo * exp(-CurrentTau/L)#
	CumulativeFsmmSing <- CumulativeFsmmSing + TermTwo * SiteFSMM(CurrentTau,L)#
	CumulativePiis <- CumulativePiis + TermTwo* (CurrentTau)#
	CumulativePsmm <- CumulativePsmm + TermTwo* Pi_SMM(CurrentTau,L)#
	SumTermTwo <- SumTermTwo + TermTwo#
    if (j==11){#
        break#
    }#
#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlim=c(2,10),xlab="Tau",ylab="Fi")#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red")#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_DH,type="p",ylim=c(0,13.5),xlim=c(2,10),xlab="Tau",ylab="pi")#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red")#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_P,type="p",ylim=c(0,0.9),xlim=c(2,10),xlab="Tau",ylab="F")#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red")#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(2:10,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(2,10),xlab="Number of linked SSRs",ylab="Homoplasy")#
lines(2:10,PartialMSH,type="p",col="black")#
lines(2:10,PartialDH,type="p",col="blue")#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("SuppFig1.pdf")#
#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(2:10,IS_DH,type="p",ylim=c(0,13),xlab="Number of linked SSRs",ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlab="Number of linked SSRs",ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_P,type="p",ylim=c(0,0.3),xlab="Number of linked SSRs",ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
#
# plot(2:10,PartialP,type="p",ylim=c(0,0.7),col="red",xlab="Number of loci",ylab="Homoplasy",main="D)",pch=19)#
# lines(2:10,PartialMSH,type="p",col="black",pch=19)#
# lines(2:10,PartialDH,type="p",col="blue",pch=19)#
#
plot(2:10,1-IS_P/SMM_P,type="p",ylim=c(0,0.7),col="red",xlab="Number of linked SSRs",ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(2:10,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"))#
dev.off()
IS_MSH
######### Substitute the directory appropriately to read the data!#
#
#MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedData.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 croatian random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
    LTimesTwo <- L*2#
	for (j in 0:LTimesTwo){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		else if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
		}#
		else if (j %% 2 == 0){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(L,j/2)#
            Denominator <-factorial(2)#
            JOverTwo <- j/2 - 1#
            Probs <- dbinom(1,2,0.5)#
            for (k in 1:JOverTwo){#
            Denominator <- Denominator * factorial(2)#
            Probs <- Probs * dbinom(1,2,0.5)#
            }#
            #            print(Combinations)#
            #            print(Denominator)#
            #            print(Probs)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(j)/(Denominator))* (1/L)^(j)*Probs#
		}#
        #		j <- j + 1#
	}#
	return (FSMM)#
}#
#
F_smmOriginal = function(time) {#
    CurrentDpois <- 0#
    j <- 0#
    FSMM <- 0#
    for (j in 0:12){#
        CurrentDpois <- ppois(j,time)#
        CurrentProbability <- dpois(j,time)#
        if (j == 0){#
            FSMM <- FSMM + CurrentProbability#
            #			print(FSMM)#
        }#
        if (j == 2){#
            ## Chance that the two mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
        }#
        if (j == 4){#
            ## Chance that the four mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
            ## Chance that we have two mutations, those two on two different microsatellites#
            Combinations <- comb(6,2)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 6){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
            ## Chance that you have 3 microsatellites with 2 mutations each#
            Combinations <- comb(6,3)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 8){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
            ## Chance that you have 4 microsatellites with 2 mutations each#
            Combinations <- comb(6,4)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 10){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
            ## Chance that you have 5 microsatellites with 2 mutations each#
            Combinations <- comb(6,5)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 12){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
            ## Chance that you have 6 microsatellites with 2 mutations each#
            Combinations <- comb(6,6)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
        }#
        #		j <- j + 1#
    }#
    return (FSMM)#
}#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
    #	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time,L){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/L))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_SMM_POriginal <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
L <-6#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
#
    j <- 2#
    L <- j#
	CumulativeFSMM <- 0#
    CumulativeFSMMOriginal <- 0#
    CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	print ("Here")#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
        print (k)#
    }#
#
    n <- 2#
    TermOne <- 2*((1/(k-1)) - (1/n))#
    TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
    Tij <- Tij + TermOne*TermTwo*2*N#
    NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
    CurrentGens <- TermOne*2*N#
    CurrentTau <- 2 * k * 6 * 5.5e-5#
#
	if (CurrentTau > j){#
	CurrentTau <- j#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau,L)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/L)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau,L)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau,L)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    j <- j +1#
#
    }else{#
    Probability <- pexp(k + 0.5,1/(N)) - pexp(k - 0.5,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau,L)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/L)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau,L)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau,L)#
#
    }#
    #	print(CurrentTau)#
    #	print(TermTwo)#
	CumulativeFSMM <- CumulativeFSMM + TermTwo * F_smm(CurrentTau,L)#
    CumulativeFSMMOriginal <- CumulativeFSMMOriginal + TermTwo * F_smmOriginal (CurrentTau)#
	CumulativeFIS <- CumulativeFIS + TermTwo * exp(-CurrentTau)#
	CumulativeFisSing <-CumulativeFisSing + TermTwo * exp(-CurrentTau/L)#
	CumulativeFsmmSing <- CumulativeFsmmSing + TermTwo * SiteFSMM(CurrentTau,L)#
	CumulativePiis <- CumulativePiis + TermTwo* (CurrentTau)#
	CumulativePsmm <- CumulativePsmm + TermTwo* Pi_SMM(CurrentTau,L)#
	SumTermTwo <- SumTermTwo + TermTwo#
    if (j==11){#
        break#
    }#
#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlim=c(2,10),xlab="Tau",ylab="Fi")#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red")#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_DH,type="p",ylim=c(0,13.5),xlim=c(2,10),xlab="Tau",ylab="pi")#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red")#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_P,type="p",ylim=c(0,0.9),xlim=c(2,10),xlab="Tau",ylab="F")#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red")#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(2:10,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(2,10),xlab="Number of linked SSRs",ylab="Homoplasy")#
lines(2:10,PartialMSH,type="p",col="black")#
lines(2:10,PartialDH,type="p",col="blue")#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("SuppFig1.pdf")#
#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(2:10,IS_DH,type="p",ylim=c(0,13),xlab="Number of linked SSRs",ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlab="Number of linked SSRs",ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_P,type="p",ylim=c(0,0.3),xlab="Number of linked SSRs",ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
#
# plot(2:10,PartialP,type="p",ylim=c(0,0.7),col="red",xlab="Number of loci",ylab="Homoplasy",main="D)",pch=19)#
# lines(2:10,PartialMSH,type="p",col="black",pch=19)#
# lines(2:10,PartialDH,type="p",col="blue",pch=19)#
#
plot(2:10,1-IS_P/SMM_P,type="p",ylim=c(0,0.7),col="red",xlab="Number of linked SSRs",ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(2:10,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"))#
dev.off()
######### Substitute the directory appropriately to read the data!#
#
#MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedData.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 croatian random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
    LTimesTwo <- L*2#
	for (j in 0:LTimesTwo){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		else if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
		}#
		else if (j %% 2 == 0){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(L,j/2)#
            Denominator <-factorial(2)#
            JOverTwo <- j/2 - 1#
            Probs <- dbinom(1,2,0.5)#
            for (k in 1:JOverTwo){#
            Denominator <- Denominator * factorial(2)#
            Probs <- Probs * dbinom(1,2,0.5)#
            }#
            #            print(Combinations)#
            #            print(Denominator)#
            #            print(Probs)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(j)/(Denominator))* (1/L)^(j)*Probs#
		}#
        #		j <- j + 1#
	}#
	return (FSMM)#
}#
#
F_smmOriginal = function(time) {#
    CurrentDpois <- 0#
    j <- 0#
    FSMM <- 0#
    for (j in 0:12){#
        CurrentDpois <- ppois(j,time)#
        CurrentProbability <- dpois(j,time)#
        if (j == 0){#
            FSMM <- FSMM + CurrentProbability#
            #			print(FSMM)#
        }#
        if (j == 2){#
            ## Chance that the two mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
        }#
        if (j == 4){#
            ## Chance that the four mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
            ## Chance that we have two mutations, those two on two different microsatellites#
            Combinations <- comb(6,2)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 6){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
            ## Chance that you have 3 microsatellites with 2 mutations each#
            Combinations <- comb(6,3)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 8){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
            ## Chance that you have 4 microsatellites with 2 mutations each#
            Combinations <- comb(6,4)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 10){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
            ## Chance that you have 5 microsatellites with 2 mutations each#
            Combinations <- comb(6,5)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 12){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
            ## Chance that you have 6 microsatellites with 2 mutations each#
            Combinations <- comb(6,6)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
        }#
        #		j <- j + 1#
    }#
    return (FSMM)#
}#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
    #	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time,L){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/L))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_SMM_POriginal <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
L <-6#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
#
    j <- 2#
    L <- j#
	CumulativeFSMM <- 0#
    CumulativeFSMMOriginal <- 0#
    CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	print ("Here")#
    ExpectedValue <- 0#
TotalProb <- 0 + pexp(0.5,1/(N))#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
        print (k)#
    }#
#
    n <- 2#
    TermOne <- 2*((1/(k-1)) - (1/n))#
    TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
    Tij <- Tij + TermOne*TermTwo*2*N#
    NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
    CurrentGens <- TermOne*2*N#
    CurrentTau <- 2 * k * 6 * 5.5e-5#
#
	if (CurrentTau > j){#
	CurrentTau <- j#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau,L)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/L)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau,L)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau,L)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    j <- j +1#
#
    }else{#
    Probability <- pexp(k + 0.5,1/(N)) - pexp(k - 0.5,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau,L)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/L)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau,L)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau,L)#
#
    }#
    #	print(CurrentTau)#
    #	print(TermTwo)#
	SumTermTwo <- SumTermTwo + TermTwo#
    if (j==11){#
        break#
    }#
#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlim=c(2,10),xlab="Tau",ylab="Fi")#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red")#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_DH,type="p",ylim=c(0,13.5),xlim=c(2,10),xlab="Tau",ylab="pi")#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red")#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_P,type="p",ylim=c(0,0.9),xlim=c(2,10),xlab="Tau",ylab="F")#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red")#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(2:10,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(2,10),xlab="Number of linked SSRs",ylab="Homoplasy")#
lines(2:10,PartialMSH,type="p",col="black")#
lines(2:10,PartialDH,type="p",col="blue")#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("SuppFig1.pdf")#
#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(2:10,IS_DH,type="p",ylim=c(0,13),xlab="Number of linked SSRs",ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlab="Number of linked SSRs",ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_P,type="p",ylim=c(0,0.3),xlab="Number of linked SSRs",ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
#
# plot(2:10,PartialP,type="p",ylim=c(0,0.7),col="red",xlab="Number of loci",ylab="Homoplasy",main="D)",pch=19)#
# lines(2:10,PartialMSH,type="p",col="black",pch=19)#
# lines(2:10,PartialDH,type="p",col="blue",pch=19)#
#
plot(2:10,1-IS_P/SMM_P,type="p",ylim=c(0,0.7),col="red",xlab="Number of linked SSRs",ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(2:10,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"))#
dev.off()
TotalProb
CurrentTau
######### Substitute the directory appropriately to read the data!#
#
#MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedData.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 croatian random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
    LTimesTwo <- L*2#
	for (j in 0:LTimesTwo){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		else if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
		}#
		else if (j %% 2 == 0){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(L,j/2)#
            Denominator <-factorial(2)#
            JOverTwo <- j/2 - 1#
            Probs <- dbinom(1,2,0.5)#
            for (k in 1:JOverTwo){#
            Denominator <- Denominator * factorial(2)#
            Probs <- Probs * dbinom(1,2,0.5)#
            }#
            #            print(Combinations)#
            #            print(Denominator)#
            #            print(Probs)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(j)/(Denominator))* (1/L)^(j)*Probs#
		}#
        #		j <- j + 1#
	}#
	return (FSMM)#
}#
#
F_smmOriginal = function(time) {#
    CurrentDpois <- 0#
    j <- 0#
    FSMM <- 0#
    for (j in 0:12){#
        CurrentDpois <- ppois(j,time)#
        CurrentProbability <- dpois(j,time)#
        if (j == 0){#
            FSMM <- FSMM + CurrentProbability#
            #			print(FSMM)#
        }#
        if (j == 2){#
            ## Chance that the two mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
        }#
        if (j == 4){#
            ## Chance that the four mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
            ## Chance that we have two mutations, those two on two different microsatellites#
            Combinations <- comb(6,2)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 6){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
            ## Chance that you have 3 microsatellites with 2 mutations each#
            Combinations <- comb(6,3)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 8){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
            ## Chance that you have 4 microsatellites with 2 mutations each#
            Combinations <- comb(6,4)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 10){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
            ## Chance that you have 5 microsatellites with 2 mutations each#
            Combinations <- comb(6,5)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 12){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
            ## Chance that you have 6 microsatellites with 2 mutations each#
            Combinations <- comb(6,6)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
        }#
        #		j <- j + 1#
    }#
    return (FSMM)#
}#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
    #	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time,L){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/L))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_SMM_POriginal <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
L <-6#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
#
    j <- 2#
    L <- j#
	CumulativeFSMM <- 0#
    CumulativeFSMMOriginal <- 0#
    CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	print ("Here")#
    ExpectedValue <- 0#
TotalProb <- 0 + pexp(0.5,1/(N))#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
        print (k)#
    }#
#
    n <- 2#
    TermOne <- 2*((1/(k-1)) - (1/n))#
    TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
    Tij <- Tij + TermOne*TermTwo*2*N#
    NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
    CurrentGens <- TermOne*2*N#
    CurrentTau <- 2 * k * 6 * 5.5e-5#
#
	if (CurrentTau > j){#
	CurrentTau <- j#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau,L)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/L)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau,L)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau,L)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    j <- j +1#
    L <- j#
    }else{#
    Probability <- pexp(k + 0.5,1/(N)) - pexp(k - 0.5,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau,L)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/L)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau,L)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau,L)#
#
    }#
    #	print(CurrentTau)#
    #	print(TermTwo)#
	SumTermTwo <- SumTermTwo + TermTwo#
    if (j==11){#
        break#
    }#
#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlim=c(2,10),xlab="Tau",ylab="Fi")#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red")#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_DH,type="p",ylim=c(0,13.5),xlim=c(2,10),xlab="Tau",ylab="pi")#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red")#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_P,type="p",ylim=c(0,0.9),xlim=c(2,10),xlab="Tau",ylab="F")#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red")#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(2:10,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(2,10),xlab="Number of linked SSRs",ylab="Homoplasy")#
lines(2:10,PartialMSH,type="p",col="black")#
lines(2:10,PartialDH,type="p",col="blue")#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("SuppFig1.pdf")#
#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(2:10,IS_DH,type="p",ylim=c(0,13),xlab="Number of linked SSRs",ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlab="Number of linked SSRs",ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_P,type="p",ylim=c(0,0.3),xlab="Number of linked SSRs",ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
#
# plot(2:10,PartialP,type="p",ylim=c(0,0.7),col="red",xlab="Number of loci",ylab="Homoplasy",main="D)",pch=19)#
# lines(2:10,PartialMSH,type="p",col="black",pch=19)#
# lines(2:10,PartialDH,type="p",col="blue",pch=19)#
#
plot(2:10,1-IS_P/SMM_P,type="p",ylim=c(0,0.7),col="red",xlab="Number of linked SSRs",ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(2:10,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"))#
dev.off()
######### Substitute the directory appropriately to read the data!#
#
#MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedData.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 croatian random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
    LTimesTwo <- L*2#
	for (j in 0:LTimesTwo){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		else if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
		}#
		else if (j %% 2 == 0){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(L,j/2)#
            Denominator <-factorial(2)#
            JOverTwo <- j/2 - 1#
            Probs <- dbinom(1,2,0.5)#
            for (k in 1:JOverTwo){#
            Denominator <- Denominator * factorial(2)#
            Probs <- Probs * dbinom(1,2,0.5)#
            }#
            #            print(Combinations)#
            #            print(Denominator)#
            #            print(Probs)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(j)/(Denominator))* (1/L)^(j)*Probs#
		}#
        #		j <- j + 1#
	}#
	return (FSMM)#
}#
#
F_smmOriginal = function(time) {#
    CurrentDpois <- 0#
    j <- 0#
    FSMM <- 0#
    for (j in 0:12){#
        CurrentDpois <- ppois(j,time)#
        CurrentProbability <- dpois(j,time)#
        if (j == 0){#
            FSMM <- FSMM + CurrentProbability#
            #			print(FSMM)#
        }#
        if (j == 2){#
            ## Chance that the two mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
        }#
        if (j == 4){#
            ## Chance that the four mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
            ## Chance that we have two mutations, those two on two different microsatellites#
            Combinations <- comb(6,2)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 6){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
            ## Chance that you have 3 microsatellites with 2 mutations each#
            Combinations <- comb(6,3)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 8){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
            ## Chance that you have 4 microsatellites with 2 mutations each#
            Combinations <- comb(6,4)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 10){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
            ## Chance that you have 5 microsatellites with 2 mutations each#
            Combinations <- comb(6,5)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 12){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
            ## Chance that you have 6 microsatellites with 2 mutations each#
            Combinations <- comb(6,6)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
        }#
        #		j <- j + 1#
    }#
    return (FSMM)#
}#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
    #	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time,L){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/L))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_SMM_POriginal <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
L <-6#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
#
for (j in 2:10){#
    L <- j#
	CumulativeFSMM <- 0#
    CumulativeFSMMOriginal <- 0#
    CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	print ("Here")#
for (k in 150:2){#
#
	n <- 150#
	TermOne <- 2*((1/(k-1)) - (1/n))#
	TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
	Tij <- Tij + TermOne*TermTwo*2*N#
	NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
	CurrentGens <- TermOne*2*N#
	CurrentTau <- CurrentGens *L*5.5e-5#
	if (CurrentTau > j){#
	CurrentTau <- j#
	}#
	print(CurrentTau)#
    #	print(TermTwo)#
	CumulativeFSMM <- CumulativeFSMM + TermTwo * F_smm(CurrentTau,L)#
    CumulativeFSMMOriginal <- CumulativeFSMMOriginal + TermTwo * F_smmOriginal (CurrentTau)#
	CumulativeFIS <- CumulativeFIS + TermTwo * exp(-CurrentTau)#
	CumulativeFisSing <-CumulativeFisSing + TermTwo * exp(-CurrentTau/L)#
	CumulativeFsmmSing <- CumulativeFsmmSing + TermTwo * SiteFSMM(CurrentTau,L)#
	CumulativePiis <- CumulativePiis + TermTwo* (CurrentTau)#
	CumulativePsmm <- CumulativePsmm + TermTwo* Pi_SMM(CurrentTau,L)#
	SumTermTwo <- SumTermTwo + TermTwo#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
	Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing)#
	Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing)#
	Theory_IS_P <- c(Theory_IS_P,CumulativeFIS)#
	Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM)#
    Theory_SMM_POriginal <- c(Theory_SMM_POriginal,CumulativeFSMMOriginal)#
	Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis)#
	Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm)#
	PValues <- c(PValues,(1-CumulativeFIS/CumulativeFSMM))#
	MSHValues <- c(MSHValues,(1-CumulativeFisSing/CumulativeFsmmSing))#
	DHValues <- c(DHValues,(1-CumulativePsmm/CumulativePiis))#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel_Old.pdf")#
#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlim=c(2,10),xlab="Tau",ylab="Fi")#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red")#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel_Old.pdf")#
#
plot(2:10,IS_DH,type="p",ylim=c(0,13.5),xlim=c(2,10),xlab="Tau",ylab="pi")#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red")#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel_Old.pdf")#
#
plot(2:10,IS_P,type="p",ylim=c(0,0.9),xlim=c(2,10),xlab="Tau",ylab="F")#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red")#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel_Old.pdf")#
plot(2:10,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(2,10),xlab="Number of linked SSRs",ylab="Homoplasy")#
lines(2:10,PartialMSH,type="p",col="black")#
lines(2:10,PartialDH,type="p",col="blue")#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("SuppFig1_Old.pdf")#
#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(2:10,IS_DH,type="p",ylim=c(0,13),xlab="Number of linked SSRs",ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlab="Number of linked SSRs",ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_P,type="p",ylim=c(0,0.3),xlab="Number of linked SSRs",ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
#
# plot(2:10,PartialP,type="p",ylim=c(0,0.7),col="red",xlab="Number of loci",ylab="Homoplasy",main="D)",pch=19)#
# lines(2:10,PartialMSH,type="p",col="black",pch=19)#
# lines(2:10,PartialDH,type="p",col="blue",pch=19)#
#
plot(2:10,1-IS_P/SMM_P,type="p",ylim=c(0,0.7),col="red",xlab="Number of linked SSRs",ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(2:10,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"))#
dev.off()
######### Substitute the directory appropriately to read the data!#
#
#MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedData.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 croatian random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
    LTimesTwo <- L*2#
	for (j in 0:LTimesTwo){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		else if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
		}#
		else if (j %% 2 == 0){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(L,j/2)#
            Denominator <-factorial(2)#
            JOverTwo <- j/2 - 1#
            Probs <- dbinom(1,2,0.5)#
            for (k in 1:JOverTwo){#
            Denominator <- Denominator * factorial(2)#
            Probs <- Probs * dbinom(1,2,0.5)#
            }#
            #            print(Combinations)#
            #            print(Denominator)#
            #            print(Probs)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(j)/(Denominator))* (1/L)^(j)*Probs#
		}#
        #		j <- j + 1#
	}#
	return (FSMM)#
}#
#
F_smmOriginal = function(time) {#
    CurrentDpois <- 0#
    j <- 0#
    FSMM <- 0#
    for (j in 0:12){#
        CurrentDpois <- ppois(j,time)#
        CurrentProbability <- dpois(j,time)#
        if (j == 0){#
            FSMM <- FSMM + CurrentProbability#
            #			print(FSMM)#
        }#
        if (j == 2){#
            ## Chance that the two mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
        }#
        if (j == 4){#
            ## Chance that the four mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
            ## Chance that we have two mutations, those two on two different microsatellites#
            Combinations <- comb(6,2)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 6){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
            ## Chance that you have 3 microsatellites with 2 mutations each#
            Combinations <- comb(6,3)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 8){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
            ## Chance that you have 4 microsatellites with 2 mutations each#
            Combinations <- comb(6,4)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 10){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
            ## Chance that you have 5 microsatellites with 2 mutations each#
            Combinations <- comb(6,5)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 12){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
            ## Chance that you have 6 microsatellites with 2 mutations each#
            Combinations <- comb(6,6)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
        }#
        #		j <- j + 1#
    }#
    return (FSMM)#
}#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
    #	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time,L){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/L))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_SMM_POriginal <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
L <-6#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
for (j in 2:10){#
    L <- j#
	CumulativeFSMM <- 0#
    CumulativeFSMMOriginal <- 0#
    CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	print ("Here")#
    ExpectedValue <- 0#
TotalProb <- 0 + pexp(0.5,1/(N))#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
        print (k)#
    }#
#
    n <- 2#
    TermOne <- 2*((1/(k-1)) - (1/n))#
    TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
    Tij <- Tij + TermOne*TermTwo*2*N#
    NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
    CurrentGens <- TermOne*2*N#
    CurrentTau <- 2 * k * 6 * 5.5e-5#
#
	if (CurrentTau > j){#
	CurrentTau <- j#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau,L)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/L)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau,L)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau,L)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    break#
    }else{#
    Probability <- pexp(k + 0.5,1/(N)) - pexp(k - 0.5,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau,L)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/L)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau,L)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau,L)#
#
    }#
    #	print(CurrentTau)#
    #	print(TermTwo)#
	SumTermTwo <- SumTermTwo + TermTwo#
#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlim=c(2,10),xlab="Tau",ylab="Fi")#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red")#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_DH,type="p",ylim=c(0,13.5),xlim=c(2,10),xlab="Tau",ylab="pi")#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red")#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_P,type="p",ylim=c(0,0.9),xlim=c(2,10),xlab="Tau",ylab="F")#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red")#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(2:10,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(2,10),xlab="Number of linked SSRs",ylab="Homoplasy")#
lines(2:10,PartialMSH,type="p",col="black")#
lines(2:10,PartialDH,type="p",col="blue")#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("SuppFig1.pdf")#
#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(2:10,IS_DH,type="p",ylim=c(0,13),xlab="Number of linked SSRs",ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlab="Number of linked SSRs",ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_P,type="p",ylim=c(0,0.3),xlab="Number of linked SSRs",ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
#
# plot(2:10,PartialP,type="p",ylim=c(0,0.7),col="red",xlab="Number of loci",ylab="Homoplasy",main="D)",pch=19)#
# lines(2:10,PartialMSH,type="p",col="black",pch=19)#
# lines(2:10,PartialDH,type="p",col="blue",pch=19)#
#
plot(2:10,1-IS_P/SMM_P,type="p",ylim=c(0,0.7),col="red",xlab="Number of linked SSRs",ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(2:10,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"))#
dev.off()
######### Substitute the directory appropriately to read the data!#
#
#MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedData.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 croatian random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
    LTimesTwo <- L*2#
	for (j in 0:LTimesTwo){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		else if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
		}#
		else if (j %% 2 == 0){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(L,j/2)#
            Denominator <-factorial(2)#
            JOverTwo <- j/2 - 1#
            Probs <- dbinom(1,2,0.5)#
            for (k in 1:JOverTwo){#
            Denominator <- Denominator * factorial(2)#
            Probs <- Probs * dbinom(1,2,0.5)#
            }#
            #            print(Combinations)#
            #            print(Denominator)#
            #            print(Probs)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(j)/(Denominator))* (1/L)^(j)*Probs#
		}#
        #		j <- j + 1#
	}#
	return (FSMM)#
}#
#
F_smmOriginal = function(time) {#
    CurrentDpois <- 0#
    j <- 0#
    FSMM <- 0#
    for (j in 0:12){#
        CurrentDpois <- ppois(j,time)#
        CurrentProbability <- dpois(j,time)#
        if (j == 0){#
            FSMM <- FSMM + CurrentProbability#
            #			print(FSMM)#
        }#
        if (j == 2){#
            ## Chance that the two mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
        }#
        if (j == 4){#
            ## Chance that the four mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
            ## Chance that we have two mutations, those two on two different microsatellites#
            Combinations <- comb(6,2)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 6){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
            ## Chance that you have 3 microsatellites with 2 mutations each#
            Combinations <- comb(6,3)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 8){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
            ## Chance that you have 4 microsatellites with 2 mutations each#
            Combinations <- comb(6,4)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 10){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
            ## Chance that you have 5 microsatellites with 2 mutations each#
            Combinations <- comb(6,5)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 12){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
            ## Chance that you have 6 microsatellites with 2 mutations each#
            Combinations <- comb(6,6)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
        }#
        #		j <- j + 1#
    }#
    return (FSMM)#
}#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
    #	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time,L){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/L))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_SMM_POriginal <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
L <-6#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
for (j in 2:10){#
    L <- j#
	CumulativeFSMM <- 0#
    CumulativeFSMMOriginal <- 0#
    CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	print ("Here")#
    ExpectedValue <- 0#
TotalProb <- 0 + pexp(0.5,1/(N))#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
        print (k)#
    }#
#
    n <- 2#
    TermOne <- 2*((1/(k-1)) - (1/n))#
    TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
    Tij <- Tij + TermOne*TermTwo*2*N#
    NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
    CurrentGens <- TermOne*2*N#
    CurrentTau <- 2 * k * L * 5.5e-5#
#
	if (CurrentTau > j){#
	CurrentTau <- j#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau,L)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/L)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau,L)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau,L)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    break#
    }else{#
    Probability <- pexp(k + 0.5,1/(N)) - pexp(k - 0.5,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau,L)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/L)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau,L)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau,L)#
#
    }#
    #	print(CurrentTau)#
    #	print(TermTwo)#
	SumTermTwo <- SumTermTwo + TermTwo#
#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlim=c(2,10),xlab="Tau",ylab="Fi")#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red")#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_DH,type="p",ylim=c(0,13.5),xlim=c(2,10),xlab="Tau",ylab="pi")#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red")#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_P,type="p",ylim=c(0,0.9),xlim=c(2,10),xlab="Tau",ylab="F")#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red")#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(2:10,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(2,10),xlab="Number of linked SSRs",ylab="Homoplasy")#
lines(2:10,PartialMSH,type="p",col="black")#
lines(2:10,PartialDH,type="p",col="blue")#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("SuppFig1.pdf")#
#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(2:10,IS_DH,type="p",ylim=c(0,13),xlab="Number of linked SSRs",ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlab="Number of linked SSRs",ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_P,type="p",ylim=c(0,0.3),xlab="Number of linked SSRs",ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
#
# plot(2:10,PartialP,type="p",ylim=c(0,0.7),col="red",xlab="Number of loci",ylab="Homoplasy",main="D)",pch=19)#
# lines(2:10,PartialMSH,type="p",col="black",pch=19)#
# lines(2:10,PartialDH,type="p",col="blue",pch=19)#
#
plot(2:10,1-IS_P/SMM_P,type="p",ylim=c(0,0.7),col="red",xlab="Number of linked SSRs",ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(2:10,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"))#
dev.off()
TestP
TestP <- PValues
TestMSH <- MSHValues
TestDH <- DHValues
######### Substitute the directory appropriately to read the data!#
#
#MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedData.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 croatian random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
    LTimesTwo <- L*2#
	for (j in 0:LTimesTwo){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		else if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
		}#
		else if (j %% 2 == 0){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(L,j/2)#
            Denominator <-factorial(2)#
            JOverTwo <- j/2 - 1#
            Probs <- dbinom(1,2,0.5)#
            for (k in 1:JOverTwo){#
            Denominator <- Denominator * factorial(2)#
            Probs <- Probs * dbinom(1,2,0.5)#
            }#
            #            print(Combinations)#
            #            print(Denominator)#
            #            print(Probs)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(j)/(Denominator))* (1/L)^(j)*Probs#
		}#
        #		j <- j + 1#
	}#
	return (FSMM)#
}#
#
F_smmOriginal = function(time) {#
    CurrentDpois <- 0#
    j <- 0#
    FSMM <- 0#
    for (j in 0:12){#
        CurrentDpois <- ppois(j,time)#
        CurrentProbability <- dpois(j,time)#
        if (j == 0){#
            FSMM <- FSMM + CurrentProbability#
            #			print(FSMM)#
        }#
        if (j == 2){#
            ## Chance that the two mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
        }#
        if (j == 4){#
            ## Chance that the four mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
            ## Chance that we have two mutations, those two on two different microsatellites#
            Combinations <- comb(6,2)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 6){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
            ## Chance that you have 3 microsatellites with 2 mutations each#
            Combinations <- comb(6,3)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 8){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
            ## Chance that you have 4 microsatellites with 2 mutations each#
            Combinations <- comb(6,4)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 10){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
            ## Chance that you have 5 microsatellites with 2 mutations each#
            Combinations <- comb(6,5)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 12){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
            ## Chance that you have 6 microsatellites with 2 mutations each#
            Combinations <- comb(6,6)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
        }#
        #		j <- j + 1#
    }#
    return (FSMM)#
}#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
    #	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time,L){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/L))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_SMM_POriginal <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
L <-6#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
#
for (j in 2:10){#
    L <- j#
	CumulativeFSMM <- 0#
    CumulativeFSMMOriginal <- 0#
    CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	print ("Here")#
for (k in 150:2){#
#
	n <- 150#
	TermOne <- 2*((1/(k-1)) - (1/n))#
	TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
	Tij <- Tij + TermOne*TermTwo*2*N#
	NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
	CurrentGens <- TermOne*2*N#
	CurrentTau <- CurrentGens *L*5.5e-5#
	if (CurrentTau > j){#
	CurrentTau <- j#
	}#
	print(CurrentTau)#
    #	print(TermTwo)#
	CumulativeFSMM <- CumulativeFSMM + TermTwo * F_smm(CurrentTau,L)#
    CumulativeFSMMOriginal <- CumulativeFSMMOriginal + TermTwo * F_smmOriginal (CurrentTau)#
	CumulativeFIS <- CumulativeFIS + TermTwo * exp(-CurrentTau)#
	CumulativeFisSing <-CumulativeFisSing + TermTwo * exp(-CurrentTau/L)#
	CumulativeFsmmSing <- CumulativeFsmmSing + TermTwo * SiteFSMM(CurrentTau,L)#
	CumulativePiis <- CumulativePiis + TermTwo* (CurrentTau)#
	CumulativePsmm <- CumulativePsmm + TermTwo* Pi_SMM(CurrentTau,L)#
	SumTermTwo <- SumTermTwo + TermTwo#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
	Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing)#
	Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing)#
	Theory_IS_P <- c(Theory_IS_P,CumulativeFIS)#
	Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM)#
    Theory_SMM_POriginal <- c(Theory_SMM_POriginal,CumulativeFSMMOriginal)#
	Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis)#
	Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm)#
	PValues <- c(PValues,(1-CumulativeFIS/CumulativeFSMM))#
	MSHValues <- c(MSHValues,(1-CumulativeFisSing/CumulativeFsmmSing))#
	DHValues <- c(DHValues,(1-CumulativePsmm/CumulativePiis))#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel_Old.pdf")#
#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlim=c(2,10),xlab="Tau",ylab="Fi")#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red")#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel_Old.pdf")#
#
plot(2:10,IS_DH,type="p",ylim=c(0,13.5),xlim=c(2,10),xlab="Tau",ylab="pi")#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red")#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel_Old.pdf")#
#
plot(2:10,IS_P,type="p",ylim=c(0,0.9),xlim=c(2,10),xlab="Tau",ylab="F")#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red")#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel_Old.pdf")#
plot(2:10,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(2,10),xlab="Number of linked SSRs",ylab="Homoplasy")#
lines(2:10,PartialMSH,type="p",col="black")#
lines(2:10,PartialDH,type="p",col="blue")#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("SuppFig1_Old.pdf")#
#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(2:10,IS_DH,type="p",ylim=c(0,13),xlab="Number of linked SSRs",ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlab="Number of linked SSRs",ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_P,type="p",ylim=c(0,0.3),xlab="Number of linked SSRs",ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
#
# plot(2:10,PartialP,type="p",ylim=c(0,0.7),col="red",xlab="Number of loci",ylab="Homoplasy",main="D)",pch=19)#
# lines(2:10,PartialMSH,type="p",col="black",pch=19)#
# lines(2:10,PartialDH,type="p",col="blue",pch=19)#
#
plot(2:10,1-IS_P/SMM_P,type="p",ylim=c(0,0.7),col="red",xlab="Number of linked SSRs",ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(2:10,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"))#
dev.off()
TestP
PValues
sum(TestP-PValues)
sum(TestMSH-MSHValues)
sum(TestDH-DHValues)
N
dgeom(1,1/N)
pexp(1.5,1/N) - pexp(0.5,1/N)
dexp(1,1/N)
dexp(2,1/N)
dexp(1000,1/N)
pexp(1000.5,1/N) - pexp(999.5,1/N)
plot(dexp(1:100000,1/N))
Test <- dexp(1:100000,1/N)
OtherTest <- pexp(1:100000 +.5,1/N) - pexp(1:100000 -.5,1/N)
sum(Test-OtherTest)
plot(Test)
lines(OtherTest,col="red")
Check <- dgeom(1:100000,1/N)
lines(Check,col="blue")
sum(Check-Test)
sum(dexp(1:100000,1/N))
sum(dexp(1:1000000,1/N))
sum(dexp(1:2000000,1/N))
sum(dexp(0:2000000,1/N))
sum(dexp(1:2000000,1/N))
######### Substitute the directory appropriately to read the data!#
############### This R script generates Figure 1 from the paper ################
### Point to the directory containing this script and the data in the MyDir variable#
#
# MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure1"#
#
MyDir <- "/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedDataStepwiseCoalModel.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:10){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:10){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
	for (j in 0:12){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
		}#
		if (j == 4){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(6,2)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
		}#
		if (j == 6){#
## Chance that the six mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
## Chance that you have 3 microsatellites with 2 mutations each#
			Combinations <- comb(6,3)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
		}#
		if (j == 8){#
## Chance that the eight mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
## Chance that you have 4 microsatellites with 2 mutations each#
			Combinations <- comb(6,4)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
		}#
		if (j == 10){#
## Chance that the ten mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
## Chance that you have 5 microsatellites with 2 mutations each#
			Combinations <- comb(6,5)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
		}#
		if (j == 12){#
## Chance that the twelve mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
## Chance that you have 6 microsatellites with 2 mutations each#
			Combinations <- comb(6,6)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
		}#
#		j <- j + 1#
	}#
	return (FSMM)#
}#
#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/6))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
#
    print (j)#
	CumulativeFSMM <- 0#
	CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	ExpectedValue <- 0#
    TotalProb <- 0 + dexp(0,1/(N))#
    j <- 1#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
    print (k)#
    }#
	n <- 2#
	TermOne <- 2*((1/(k-1)) - (1/n))#
	TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
	Tij <- Tij + TermOne*TermTwo*2*N#
	NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
	CurrentGens <- TermOne*2*N#
	CurrentTau <- 2 * k * 6 * 5.5e-5#
	if (CurrentTau > KeyTauTimes[j]){#
	CurrentTau <- KeyTauTimes[j]#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/6)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    j <- j +1#
    }else {#
    Probability <- dexp(k,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/6)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau)#
    }#
    #	print(CurrentTau)#
    #	print(TermTwo)#
	SumTermTwo <- SumTermTwo + TermTwo#
    if (j==151){#
    break#
    }#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(SimTauTimes,IS_MSH,type="p",ylim=c(0,1),xlim=c(0,15),xlab="Tau",ylab="Fi")#
lines(KeyTauTimes,Theory_IS_MSH,lty=2)#
#
lines(SimTauTimes,SMM_MSH,type="p",col="red")#
lines(KeyTauTimes,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(SimTauTimes,IS_DH,type="p",ylim=c(0,13.5),xlim=c(0,15),xlab="Tau",ylab="pi")#
lines(KeyTauTimes,Theory_IS_DH,lty=2)#
#
lines(SimTauTimes,SMM_DH,type="p",col="red")#
lines(KeyTauTimes,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(SimTauTimes,IS_P,type="p",ylim=c(0,0.9),xlim=c(0,15),xlab="Tau",ylab="F")#
lines(KeyTauTimes,Theory_IS_P,lty=2)#
#
lines(SimTauTimes,SMM_P,type="p",col="red")#
lines(KeyTauTimes,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(SimTauTimes,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(0,15),xlab="Tau",ylab="Homoplasy")#
lines(SimTauTimes,PartialMSH,type="p",col="black")#
lines(SimTauTimes,PartialDH,type="p",col="blue")#
#
lines(KeyTauTimes,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(KeyTauTimes,MSHValues,col="black",lty=2)#
lines(KeyTauTimes,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("Figure1.pdf")#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(SimTauTimes,IS_DH,type="p",ylim=c(0,15),xlab=expression(tau),ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(KeyTauTimes,Theory_IS_DH,lty=2)#
#
lines(SimTauTimes,SMM_DH,type="p",col="red",pch=19)#
lines(KeyTauTimes,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"),cex=1.25)#
plot(SimTauTimes,IS_MSH,type="p",ylim=c(0,1),xlab=expression(tau),ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(KeyTauTimes,Theory_IS_MSH,lty=2)#
#
lines(SimTauTimes,SMM_MSH,type="p",col="red",pch=19)#
lines(KeyTauTimes,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"),cex=1.25)#
plot(SimTauTimes,IS_P,type="p",ylim=c(0,0.3),xlab=expression(tau),ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(KeyTauTimes,Theory_IS_P,lty=2)#
#
lines(SimTauTimes,SMM_P,type="p",col="red",pch=19)#
lines(KeyTauTimes,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"),cex=1.25)#
#
# plot(SimTauTimes,PartialP,type="p",ylim=c(0,1),col="red",xlab="Tau",ylab="Homoplasy",main="D)",pch=19)#
# lines(SimTauTimes,PartialMSH,type="p",col="black",pch=19)#
# lines(SimTauTimes,PartialDH,type="p",col="blue",pch=19)#
#
plot(SimTauTimes,1-IS_P/SMM_P,type="p",ylim=c(0,1),col="red", xlab=expression(tau), ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(SimTauTimes,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(SimTauTimes,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
lines(KeyTauTimes,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(KeyTauTimes,MSHValues,col="black",lty=2)#
lines(KeyTauTimes,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"),cex=1.25)#
dev.off()
######### Substitute the directory appropriately to read the data!#
#
#MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/SupplementaryFigure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedData.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:9){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 croatian random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
    LTimesTwo <- L*2#
	for (j in 0:LTimesTwo){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		else if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
		}#
		else if (j %% 2 == 0){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(L,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/L)^(j)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(L,j/2)#
            Denominator <-factorial(2)#
            JOverTwo <- j/2 - 1#
            Probs <- dbinom(1,2,0.5)#
            for (k in 1:JOverTwo){#
            Denominator <- Denominator * factorial(2)#
            Probs <- Probs * dbinom(1,2,0.5)#
            }#
            #            print(Combinations)#
            #            print(Denominator)#
            #            print(Probs)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(j)/(Denominator))* (1/L)^(j)*Probs#
		}#
        #		j <- j + 1#
	}#
	return (FSMM)#
}#
#
F_smmOriginal = function(time) {#
    CurrentDpois <- 0#
    j <- 0#
    FSMM <- 0#
    for (j in 0:12){#
        CurrentDpois <- ppois(j,time)#
        CurrentProbability <- dpois(j,time)#
        if (j == 0){#
            FSMM <- FSMM + CurrentProbability#
            #			print(FSMM)#
        }#
        if (j == 2){#
            ## Chance that the two mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
        }#
        if (j == 4){#
            ## Chance that the four mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
            ## Chance that we have two mutations, those two on two different microsatellites#
            Combinations <- comb(6,2)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 6){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
            ## Chance that you have 3 microsatellites with 2 mutations each#
            Combinations <- comb(6,3)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 8){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
            ## Chance that you have 4 microsatellites with 2 mutations each#
            Combinations <- comb(6,4)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 10){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
            ## Chance that you have 5 microsatellites with 2 mutations each#
            Combinations <- comb(6,5)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
        }#
        if (j == 12){#
            ## Chance that the six mutations landed on the same microsatellite#
            Combinations <- comb(6,1)#
            FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
            ## Chance that you have 6 microsatellites with 2 mutations each#
            Combinations <- comb(6,6)#
            FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
        }#
        #		j <- j + 1#
    }#
    return (FSMM)#
}#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time,L) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
    #	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time,L){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/L))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_SMM_POriginal <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
L <-6#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
for (j in 2:10){#
    L <- j#
	CumulativeFSMM <- 0#
    CumulativeFSMMOriginal <- 0#
    CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	print ("Here")#
    ExpectedValue <- 0#
TotalProb <- 0 + dexp(0,1/(N))#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
        print (k)#
    }#
#
    n <- 2#
    TermOne <- 2*((1/(k-1)) - (1/n))#
    TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
    Tij <- Tij + TermOne*TermTwo*2*N#
    NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
    CurrentGens <- TermOne*2*N#
    CurrentTau <- 2 * k * L * 5.5e-5#
#
	if (CurrentTau > j){#
	CurrentTau <- j#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau,L)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/L)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau,L)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau,L)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    break#
    }else{#
    Probability <- dexp(k,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau,L)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/L)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau,L)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau,L)#
#
    }#
    #	print(CurrentTau)#
    #	print(TermTwo)#
	SumTermTwo <- SumTermTwo + TermTwo#
#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlim=c(2,10),xlab="Tau",ylab="Fi")#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red")#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_DH,type="p",ylim=c(0,13.5),xlim=c(2,10),xlab="Tau",ylab="pi")#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red")#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(2:10,IS_P,type="p",ylim=c(0,0.9),xlim=c(2,10),xlab="Tau",ylab="F")#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red")#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(2:10,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(2,10),xlab="Number of linked SSRs",ylab="Homoplasy")#
lines(2:10,PartialMSH,type="p",col="black")#
lines(2:10,PartialDH,type="p",col="blue")#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("SuppFig1.pdf")#
#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(2:10,IS_DH,type="p",ylim=c(0,13),xlab="Number of linked SSRs",ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_DH,lty=2)#
#
lines(2:10,SMM_DH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_MSH,type="p",ylim=c(0,1),xlab="Number of linked SSRs",ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_MSH,lty=2)#
#
lines(2:10,SMM_MSH,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
plot(2:10,IS_P,type="p",ylim=c(0,0.3),xlab="Number of linked SSRs",ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,Theory_IS_P,lty=2)#
#
lines(2:10,SMM_P,type="p",col="red",pch=19)#
lines(2:10,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"))#
#
# plot(2:10,PartialP,type="p",ylim=c(0,0.7),col="red",xlab="Number of loci",ylab="Homoplasy",main="D)",pch=19)#
# lines(2:10,PartialMSH,type="p",col="black",pch=19)#
# lines(2:10,PartialDH,type="p",col="blue",pch=19)#
#
plot(2:10,1-IS_P/SMM_P,type="p",ylim=c(0,0.7),col="red",xlab="Number of linked SSRs",ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(2:10,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(2:10,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
#
lines(2:10,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(2:10,MSHValues,col="black",lty=2)#
lines(2:10,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"))#
dev.off()
######### Substitute the directory appropriately to read the data!#
############### This R script generates Figure 1 from the paper ################
### Point to the directory containing this script and the data in the MyDir variable#
#
# MyDir <-"/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure1"#
#
MyDir <- "/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure1"#
#
setwd(MyDir)#
#
L <- 6#
#
### Read data and get mean values of homoplasy #
#
PartialDH <- c()#
PartialMSH <- c()#
PartialP <- c()#
#
BiggerSampleData <- read.table("ConcatenatedDataStepwiseCoalModel.txt")#
PBigSample <- c()#
MSHBigSample <- c()#
DHBigSample <- c()#
#
for (i in 1:10){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	DH <- mean(BiggerSampleData[Start:End,6])#
	MSH <- mean(BiggerSampleData[Start:End,1])#
	P <- mean(BiggerSampleData[Start:End,4])#
	PartialP <- c(PartialP,P)#
	PartialMSH <- c(PartialMSH,MSH)#
	PartialDH <- c(PartialDH,DH)#
}#
IS_MSH <- c()#
SMM_MSH <- c()#
IS_P <- c()#
SMM_P <- c()#
IS_DH <- c()#
SMM_DH <- c()#
#
for (i in 1:10){#
	Start <- (i-1)*100 +1#
	End <- i*100#
	IS_MSH_t <- mean(BiggerSampleData[Start:End,18])#
	SMM_MSH_t <- mean(BiggerSampleData[Start:End,19])#
	IS_P_t <- mean(BiggerSampleData[Start:End,22])#
	SMM_P_t <- mean(BiggerSampleData[Start:End,23])#
	IS_DH_t <- mean(BiggerSampleData[Start:End,20])#
	SMM_DH_t <- mean(BiggerSampleData[Start:End,21])#
	IS_MSH <- c(IS_MSH,IS_MSH_t)#
	SMM_MSH <- c(SMM_MSH,SMM_MSH_t)#
	IS_P <- c(IS_P,IS_P_t)#
	SMM_P <- c(SMM_P,SMM_P_t)#
	IS_DH <- c(IS_DH,IS_DH_t)#
	SMM_DH <- c(SMM_DH,SMM_DH_t)#
}#
#
######## Next.- All the functions required to calculate the homoplasy values#
### Pre-prepare differences results from Logozar-Hizak 2001 random walk differences paper. This will be#
### used to calculate pi_smm#
#
tauvec<-1:100#
res<-c()#
altres <- c()#
altres <- c(altres,0)#
for (n in tauvec){#
	x<-rbinom(10000,n,0.5)#
	res<-c(res,mean(abs(-n + 2*x)))#
	if (n %% 2 == 0){#
		TermOne = 1/ (2^(n-2))#
		TermTwo = n / 2#
		TermThree = factorial(n-1) / (factorial(n/2) * factorial((n-1) -  n/2))#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}else {#
		TermOne = 1 / (2^(n-1))#
		TermTwo = (n + 1) / 2#
		TermThree = factorial(n) / (factorial((n + 1)/2) * factorial( n - (n + 1)/2) )#
		Multiplication <- TermOne * TermTwo * TermThree#
		altres <- c(altres,Multiplication)#
	}#
}#
#
### Function to calculate F_SMM #
#
comb = function(n, x) {#
	return(factorial(n) / (factorial(x) * factorial(n-x)))#
}#
F_smm = function(time) {#
	CurrentDpois <- 0#
	j <- 0#
	FSMM <- 0#
	for (j in 0:12){#
		CurrentDpois <- ppois(j,time)#
		CurrentProbability <- dpois(j,time)#
		if (j == 0){#
			FSMM <- FSMM + CurrentProbability#
#			print(FSMM)#
		}#
		if (j == 2){#
## Chance that the two mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(2)*dbinom(j/2,j,0.5)#
		}#
		if (j == 4){#
## Chance that the four mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(4)*dbinom(j/2,j,0.5)#
## Chance that we have two mutations, those two on two different microsatellites#
			Combinations <- comb(6,2)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(4)/(factorial(2)*factorial(2)))* (1/6)^(4)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
		}#
		if (j == 6){#
## Chance that the six mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(6)*dbinom(j/2,j,0.5)#
## Chance that you have 3 microsatellites with 2 mutations each#
			Combinations <- comb(6,3)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(6)/(factorial(2)*factorial(2)*factorial(2)))* (1/6)^(6)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)#
		}#
		if (j == 8){#
## Chance that the eight mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(8)*dbinom(j/2,j,0.5)#
## Chance that you have 4 microsatellites with 2 mutations each#
			Combinations <- comb(6,4)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(8)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(8)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
		}#
		if (j == 10){#
## Chance that the ten mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(10)*dbinom(j/2,j,0.5)#
## Chance that you have 5 microsatellites with 2 mutations each#
			Combinations <- comb(6,5)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(10)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(10)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
		}#
		if (j == 12){#
## Chance that the twelve mutations landed on the same microsatellite#
			Combinations <- comb(6,1)#
			FSMM <- FSMM + CurrentProbability* Combinations* (1/6)^(12)*dbinom(j/2,j,0.5)#
## Chance that you have 6 microsatellites with 2 mutations each#
			Combinations <- comb(6,6)#
			FSMM <- FSMM + CurrentProbability* Combinations *(factorial(12)/(factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)*factorial(2)))* (1/6)^(12)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)*dbinom(1,2,0.5)			#
		}#
#		j <- j + 1#
	}#
	return (FSMM)#
}#
#
### Function to calculate Fi_smm#
#
SiteFSMM = function(time) {#
	CurrentDpois <- 0#
	j <- 0#
	CurrentFSMM <- 0#
	L <- 6#
	while(CurrentDpois < 0.999){#
		CurrentFSMM <- CurrentFSMM + dpois(j*2,time/L)*dbinom(j,j*2,0.5)#
		CurrentDpois <-ppois(j*2,time/L)#
		j <- j + 1#
	}#
	return(CurrentFSMM)#
}#
#
## Function to calculate pi_smm#
#
Pi_SMM = function(time){#
	CurrentDpois <- 0#
	j <- 0#
	PiSMM <- 0#
	while(CurrentDpois < 0.999){#
		CurrentDpois <- CurrentDpois + dpois(j,time/L)#
		PiSMM <- PiSMM + L * ((dpois(j,time/6))*altres[j+1])#
		j <- j + 1#
	}#
	return(PiSMM)#
}#
#
#### End of functions#
#
## Routine to estimate homoplasy in the step-wise coalescent model#
#
N <- 30/(2*6*5.5e-5)#
CumulativeFSMM <- 0#
CumulativeFIS <- 0#
CumulativeFisSing <- 0#
CumulativeFsmmSing <- 0#
CumulativePiis <- 0#
CumulativePsmm <- 0#
CurrentProbabilityOfCoalescence <- 0#
CumulativeProbability <- 0#
Theory_IS_MSH <- c()#
Theory_SMM_MSH <- c()#
Theory_IS_P <- c()#
Theory_SMM_P <- c()#
Theory_IS_DH <- c()#
Theory_SMM_DH <- c()#
NormalTijCalcPart <- 0#
#
KeyTauTimes <-  1:150*.1#
SimTauTimes <- c(1.5,3,4.5,6,7.5,9,10.5,12,13.5,15)#
#
PValues <- c()#
MSHValues <- c()#
DHValues <- c()#
#
Tij <- 0#
SumTermTwo <- 0 #
#
    print (j)#
	CumulativeFSMM <- 0#
	CumulativeFIS <- 0#
	CumulativeFisSing <- 0#
	CumulativeFsmmSing <- 0#
	CumulativePiis <- 0#
	CumulativePsmm <- 0	#
	ExpectedValue <- 0#
    TotalProb <- 0 + dexp(0,1/(N))#
    j <- 1#
for (k in 1:500000){#
    if (k %% 1000 == 0){#
    print (k)#
    }#
	n <- 2#
	TermOne <- 2*((1/(k-1)) - (1/n))#
	TermTwo <- (2*(n+1))/(k*(k+1)*(n-1))#
	Tij <- Tij + TermOne*TermTwo*2*N#
	NormalTijCalcPart <- NormalTijCalcPart + TermOne*TermTwo*2*N#
	CurrentGens <- TermOne*2*N#
	CurrentTau <- 2 * k * 6 * 5.5e-5#
	if (CurrentTau > KeyTauTimes[j]){#
	CurrentTau <- KeyTauTimes[j]#
    CurrentTauFinalProb <- 1 - TotalProb#
    CumulativeFSMM_1 <- CumulativeFSMM + CurrentTauFinalProb * F_smm(CurrentTau)#
    CumulativeFIS_1 <- CumulativeFIS + CurrentTauFinalProb * exp(-CurrentTau)#
    CumulativeFisSing_1 <-CumulativeFisSing + CurrentTauFinalProb * exp(-CurrentTau/6)#
    CumulativeFsmmSing_1 <- CumulativeFsmmSing + CurrentTauFinalProb * SiteFSMM(CurrentTau)#
    CumulativePiis_1 <- CumulativePiis + CurrentTauFinalProb * (CurrentTau)#
    CumulativePsmm_1 <- CumulativePsmm + CurrentTauFinalProb * Pi_SMM(CurrentTau)#
    Theory_IS_MSH <- c(Theory_IS_MSH,CumulativeFisSing_1)#
    Theory_SMM_MSH <- c(Theory_SMM_MSH,CumulativeFsmmSing_1)#
    Theory_IS_P <- c(Theory_IS_P,CumulativeFIS_1)#
    Theory_SMM_P <- c(Theory_SMM_P,CumulativeFSMM_1)#
    Theory_IS_DH <- c(Theory_IS_DH,CumulativePiis_1)#
    Theory_SMM_DH <- c(Theory_SMM_DH,CumulativePsmm_1)#
    PValues <- c(PValues,(1-CumulativeFIS_1/CumulativeFSMM_1))#
    MSHValues <- c(MSHValues,(1-CumulativeFisSing_1/CumulativeFsmmSing_1))#
    DHValues <- c(DHValues,(1-CumulativePsmm_1/CumulativePiis_1))#
    j <- j +1#
    }else {#
    Probability <- dexp(k,1/(N))#
    ExpectedValue <- ExpectedValue + k * Probability#
    TotalProb <- TotalProb + Probability#
#
    CumulativeFSMM <- CumulativeFSMM + Probability * F_smm(CurrentTau)#
    CumulativeFIS <- CumulativeFIS + Probability * exp(-CurrentTau)#
    CumulativeFisSing <-CumulativeFisSing + Probability * exp(-CurrentTau/6)#
    CumulativeFsmmSing <- CumulativeFsmmSing + Probability * SiteFSMM(CurrentTau)#
    CumulativePiis <- CumulativePiis + Probability* (CurrentTau)#
    CumulativePsmm <- CumulativePsmm + Probability* Pi_SMM(CurrentTau)#
    }#
    #	print(CurrentTau)#
    #	print(TermTwo)#
	SumTermTwo <- SumTermTwo + TermTwo#
    if (j==151){#
    break#
    }#
#	CheckTermTwo <- c(CheckTermTwo,TermTwo)#
#	CheckTermOne <- c(CheckTermOne,TermOne)#
#	CheckTermTwo <- c()#
#	CheckTermOne <- c()#
}#
pdf("EstimatesVsTheoryMSH_StepwiseCoalModel.pdf")#
#
plot(SimTauTimes,IS_MSH,type="p",ylim=c(0,1),xlim=c(0,15),xlab="Tau",ylab="Fi")#
lines(KeyTauTimes,Theory_IS_MSH,lty=2)#
#
lines(SimTauTimes,SMM_MSH,type="p",col="red")#
lines(KeyTauTimes,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
#
pdf("EstimatesVsTheoryDH_StepwiseCoalModel.pdf")#
#
plot(SimTauTimes,IS_DH,type="p",ylim=c(0,13.5),xlim=c(0,15),xlab="Tau",ylab="pi")#
lines(KeyTauTimes,Theory_IS_DH,lty=2)#
#
lines(SimTauTimes,SMM_DH,type="p",col="red")#
lines(KeyTauTimes,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("EstimatesVsTheoryP_StepwiseCoalModel.pdf")#
#
plot(SimTauTimes,IS_P,type="p",ylim=c(0,0.9),xlim=c(0,15),xlab="Tau",ylab="F")#
lines(KeyTauTimes,Theory_IS_P,lty=2)#
#
lines(SimTauTimes,SMM_P,type="p",col="red")#
lines(KeyTauTimes,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=1,col=c("black","red"))#
#
dev.off()#
pdf("HomoplasyValues_StepwiseCoalModel.pdf")#
plot(SimTauTimes,PartialP,type="p",ylim=c(0,1),col="red",xlim=c(0,15),xlab="Tau",ylab="Homoplasy")#
lines(SimTauTimes,PartialMSH,type="p",col="black")#
lines(SimTauTimes,PartialDH,type="p",col="blue")#
#
lines(KeyTauTimes,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(KeyTauTimes,MSHValues,col="black",lty=2)#
lines(KeyTauTimes,DHValues,col="blue",lty=2)#
#
legend("topright",title="Homoplasy measure",c("P","MSH","DH"),pch=1,col=c("red","black","blue"))#
#
dev.off()#
pdf("Figure1.pdf")#
par(mfrow = c(2,2),mar=c(4.1,5.1,3.1,1.1))#
plot(SimTauTimes,IS_DH,type="p",ylim=c(0,15),xlab=expression(tau),ylab=expression(pi),main="A)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(KeyTauTimes,Theory_IS_DH,lty=2)#
#
lines(SimTauTimes,SMM_DH,type="p",col="red",pch=19)#
lines(KeyTauTimes,Theory_SMM_DH,lty=2,col="red")#
#
legend("topleft",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"),cex=1.25)#
plot(SimTauTimes,IS_MSH,type="p",ylim=c(0,1),xlab=expression(tau),ylab=expression(F[i]),main="B)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(KeyTauTimes,Theory_IS_MSH,lty=2)#
#
lines(SimTauTimes,SMM_MSH,type="p",col="red",pch=19)#
lines(KeyTauTimes,Theory_SMM_MSH,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"),cex=1.25)#
plot(SimTauTimes,IS_P,type="p",ylim=c(0,0.3),xlab=expression(tau),ylab="F",main="C)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(KeyTauTimes,Theory_IS_P,lty=2)#
#
lines(SimTauTimes,SMM_P,type="p",col="red",pch=19)#
lines(KeyTauTimes,Theory_SMM_P,lty=2,col="red")#
#
legend("topright",title="Mutation model",c("ISM","SMM"),pch=19,col=c("black","red"),cex=1.25)#
#
# plot(SimTauTimes,PartialP,type="p",ylim=c(0,1),col="red",xlab="Tau",ylab="Homoplasy",main="D)",pch=19)#
# lines(SimTauTimes,PartialMSH,type="p",col="black",pch=19)#
# lines(SimTauTimes,PartialDH,type="p",col="blue",pch=19)#
#
plot(SimTauTimes,1-IS_P/SMM_P,type="p",ylim=c(0,1),col="red", xlab=expression(tau), ylab="Homoplasy",main="D)",pch=19, cex.lab=1.5,cex.axis=1.25)#
lines(SimTauTimes,1-IS_MSH/SMM_MSH,type="p",col="black",pch=19)#
lines(SimTauTimes,(IS_DH - SMM_DH)/IS_DH,type="p",col="blue",pch=19)#
lines(KeyTauTimes,PValues,type="l",ylim=c(0,1),col="red",lty=2)#
lines(KeyTauTimes,MSHValues,col="black",lty=2)#
lines(KeyTauTimes,DHValues,col="blue",lty=2)#
#
legend("topright",c("P","MSH","DH"),pch=19,col=c("red","black","blue"),cex=1.25)#
dev.off()
Test<- dexp(1:1000,1/(N))
OtherTest <- (1/N)*exp(-1:1000/N)
sum(Test-OtherTest)
OtherTest
length(OtherTest)
length(OtherTest)Test<- dexp(1:1000,1/(N))
Test<- dexp(1:1000,1/(N))
OtherTest <- (1/N)*exp(-(1:1000)/N)
length(OtherTest)
sum(Test-OtherTest)
Test<- dexp(1:100000,1/(N))
OtherTest <- (1/N)*exp(-(1:100000)/N)
plot(Test)
lines(OtherTest,col="red")
sum(Test-OtherTest)
