153.45 - (47.36-16.19-24.53)/2
153.45 - (47.36+16.19+24.53)/2
153.45 - (47.36+16.19)/2
153.45 - (47.36+16.19+24.53)/2
153.45 - (47.36+16.19+24.53)/2 + 14.82/2
48151501-48761234
48151501 - 48761234
11100/3
0.0022
?rexp
pexp(.50,0.0022)
qexp(.50,0.0022)
315*25
qexp(.95,0.0022)
qexp(.95,0.0022)*25
qexp(.99,0.0022)*25
48625694-48565127
60567*1e-8
qexp(.95,0.0006)*3
qexp(.50,0.0006)*3
qexp(.99,0.0006)*3
qexp(.99,0.0012)*3
qexp(.95,0.0012)*3
49542795-49822148
33.0843607570605 - 32.3436064678035
0.7407543/279353
2.651678e-06*.01
2.651678e-08* 60567
qexp(.95,0.0016)*3
0.52648541535107e-08* 60567
qexp(.95, 0.0003188764*2)*3
48838566-48371885
30.3760468347606-30.1303460946392
0.2457007/466681
30.6217475748821-30.3760468347606
5.264853e-07*.01
5.264853e-09*60567
qexp(.5, 0.0003188764*2)*3
qexp(.95, 0.0003188764*2)*3
qexp(.99, 0.0003188764*2)*3
qexp(.9, 0.0003188764*2)*3
13/3
16/3
qexp(.9, 0.0003*2)*3
qexp(.9, 0.00032*2)*3
qexp(.9, 0.0003188764*2)*3
qexp(.5, 0.0003188764*2)*3
qexp(.95, 0.0003188764*2)*3
qexp(.99, 0.0003188764*2)*3
# Recombination rate in the EPAS1 gene#
#
5.264853e-09*60567#
#
qexp(.5, 0.0003188764*2)*3#
qexp(.9, 0.0003188764*2)*3#
qexp(.95, 0.0003188764*2)*3
18800+32100
50900/2
qexp(.99, 0.0003188764*2)*3
50316/12
48216/12
8.51+32.76+22.62+7.5+8.75+79.23+23.87+8.04+20
8.51+32.76+22.62+7.5+8.75+79.23+23.87+8.04+20+70
43.37+16+10.99
43.37+16
8.51+32.76+22.62+7.5+8.75+79.23+23.87+8.06+20+70+10.19
291.49/2
24.04+7.75+33.87+38.09+35.85+36+129.95+22.34+36.69+11.88+28.56+48+25.75
24.04+33.87+38.09+35.85+36+129.95+22.34+36.69+11.88+28.56+48+25.75
471.02/2
235.51-145.745
129.95+48
177.95/2
1000/28
1200/28
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesTwo <- c()#
TestRemain <- c()#
TestRemainTwo <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, exp(TimeMatrix[3,3]))#
    TestRemainTwo <- c(TestRemainTwo, (1-exp(TimeMatrix[3,3]))*(Matrix[3,2])/-Matrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")
plot(MatExponentiationValues)#
lines(TestRemain,col="red")
plot(MatExponentiationValuesTwo)
Matrix[3,2])/-Matrix[3,3]
Matrix[3,2]/-Matrix[3,3]
plot(MatExponentiationValuesTwo)
lines(TestRemainTwo,col="red")
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemain <- c()#
TestRemainTwo <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, exp(TimeMatrix[3,3]))#
    TestRemainTwo <- c(TestRemainTwo, (1-exp(TimeMatrix[3,3]))*(Matrix[3,2])/-Matrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")
50316/12
41.10+8.20+29.24+58.57+31.77+12.09+6.53+19.56+105+41.62+62+20+26.60+19.99
6.48+5.95
482.27-12.43
41.10+58.57+31.77+105+62
469.84/2
298.44/2
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, 1 - abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, 1 - abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
Dif <- TestRemainThree - Mini
Dif <- TestRemainThree - MiniTest
plot(Dif)
TestRemainThree[1:10]
MiniTest[1:10]
abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)
Time <- 0.004
abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)
1 - abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)
?pexp
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, 1 - exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
Dif <- MatExponentiationValuesThree - MiniTest
plot(Dif)
MiniTest
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
Dif <- MatExponentiationValuesThree - MiniTest
plot(Dif)
Dif <- TestRemainThree - MiniTest
plot(Dif)
library(cubature)
?adaptIntegrate
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot(MatExponentiationValuesThreeToTwo)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, )#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot (MatExponentiationValuesThreeToTwo)
lines(TestRemainThreeToTwo, col = "red")
length(TestRemainThreeToTwo)
length(MatExponentiationValuesThreeToTwo)
Integral
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot (MatExponentiationValuesThreeToTwo)
lines(TestRemainThreeToTwo, col = "red")
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot (MatExponentiationValuesThreeToTwo)
lines(TestRemainThreeToTwo,col="red")
plot(TestRemainThreeToTwo)
plot (MatExponentiationValuesThreeToTwo)
plot(TestRemainThreeToTwo)
plot(MatExponentiationValuesThreeToTwo)
MatrixExponentiation
sum(MatrixExponentiation)
Matrix[2,2]
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)
plot(TestRemainThreeToTwo)
(Matrix[3,2]/(abs(Matrix[3,3])))
Matrix[3,]
1/3
0.5/3
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)
plot (MatExponentiationValuesThreeToTwo)
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
Matrix
Time
i <- 1
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
Dif <- MiniTest - MatExponentiationValuesThree
plot(Dif)
Dif <- MiniTest - TestRemainThree
plot(Dif)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    IntegralTwo <- c(IntegralTwo, Integral2)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot(IntegralTwo)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot (IntegralTwo)
(1 - exp(-abs(Matrix[3,3])*1000*.004))
(Matrix[3,2]/(abs(Matrix[3,3])))
( exp(-abs(Matrix[2,2])*(Time - Time)))
( exp(-abs(Matrix[2,2])*(Time - 0)))
Time
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
Integral
Integral2
Integral3
Integral3*1/6
Integral3$integral*1/6
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
18800+32100
50900/2
500/20
550/20
160+20+50+376+136
550+742
1292/20
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)#
#
plot (MatExponentiationValuesFiveToFour)#
lines (TestRemainFiveToFour, col = "red")
plot (MatExponentiationValuesFiveToFour)#
lines (TestRemainFiveToFour, col = "red")
plot (MatExponentiationValuesFiveToFour - TestRemainFiveToFour)
plot (MatExponentiationValuesThreeToOne)
(0 < 1)
3*(0 < 1)
3*(0 < -1)
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0, 0), upperLimit = c(Time, Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    #    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    #   Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    #   Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is
Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))
Integral3$integral
MatExponentiationValuesThreeToOne$integral
MatExponentiationValuesThreeToOne[1000]
MatExponentiationValuesThreeToOne[100]
Time <- 100*.004
Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))
Integral3$integral
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
Integral3
Integral
?adaptintegrate
?adaptIntegrate
adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-4)
adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree$integral,col="red")
length(IntegralThree$integral)
IntegralThree
lines(IntegralThree,col="red")
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(x[2] - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree,col="red")
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree,col="red")
sum(IntegralThree)
sum(MatExponentiationValuesThreeToOne)
sum(IntegralThree-MatExponentiationValuesThreeToOne)
sum((IntegralThree-MatExponentiationValuesThreeToOne)/MatExponentiationValuesThreeToOne)
sum((MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne)
MatExponentiationValuesThreeToOne[1]
IntegralThree[1]
(MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne
MatExponentiationValuesThreeToOne[1]
(MatExponentiationValuesThreeToOne[1]-IntegralThree[1])/MatExponentiationValuesThreeToOne[1]
sum((MatExponentiationValuesThreeToOne[1]-IntegralThree[1])/MatExponentiationValuesThreeToOne[1])
sum((MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne)
sum((MatExponentiationValuesThreeToOne[600]-IntegralThree[600])/MatExponentiationValuesThreeToOne[600])
sum((MatExponentiationValuesThreeToOne[1:600]-IntegralThree[1:600])/MatExponentiationValuesThreeToOne[1:600])
sum((MatExponentiationValuesThreeToOne[1:400]-IntegralThree[1:400])/MatExponentiationValuesThreeToOne[1:400])
400/17
2740/6
5.3+4.3+6.8
16.4/3
-0.0586-0.0907-0.2750
0.4243/3
.3073+.2383+.0996
0.6452/3
0.5445+.4392+.3128
1.2965/3
.005*6
5*6
0.0125*1:10
######### Substitute the directory appropriately to read the data!#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure2")#
require(car)#
library(viridis)#
Colors <- viridis(10, alpha = 0.5, begin = 0, end = 1, option = "D")#
data <- read.table("homoplasy_tau.txt",header=T)#
diference <- (data$IS_tau - data$tau)/data$IS_tau#
data <- cbind(data,diference)#
number <- 1:1000#
data <- cbind (data,number)#
colnum <-1#
cols<-Colors#
color <- c()#
for (i in number){#
color <- c(color,cols[colnum])#
if((i %% 100) == 0){#
colnum <- colnum+1#
}#
}#
data <- cbind(data,color)#
test <- subset (data,data$diference< -1)#
data <- subset (data,data$diference>=-1)#
#pdf("Figure1.pdf",width=36)#
pdf("Figure2.pdf",height=14,width=14)#
par(mfrow = c(2,2))#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$P,data$diference,col=as.character(data$color) ,xlab="",ylab="TS",main="A)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$P,data$diference) ## it is -0.1351#
axis(2, at = c(-0.5,0,0.5),cex.axis=2)#
title (xlab="P", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
Pregression <- lm(data$diference~data$P)#
segments(0,Pregression$coefficients[1],0.65,Pregression$coefficients[1] + 0.65*Pregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,.125,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(Pregression)#
legend(0.3,-.25,c(expression(paste(rho," = -0.1351")),"Intercept = 0.3812","Beta = -0.2323","p-value = 1.9e-5"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$MSH,data$diference,col=as.character(data$color),xlab = "",ylab="TS",main="B)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$MSH,data$diference) ## it is 0.7658#
axis(2, at = c(-0.5,0,0.5),cex.axis=2)#
title (xlab="MSH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
MSHregression <- lm(data$diference~data$MSH)#
segments(0,MSHregression$coefficients[1],0.65,MSHregression$coefficients[1] + 0.65*MSHregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,0.25,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(MSHregression)#
legend(0.3 ,-.25,c(expression(paste(rho," = 0.7658")),"Intercept = 0.1011","Beta = 0.9620","p-value < 2.2e-16"),cex=2,bty="n")#
#par(mar=c(5,6,4,10) + 0.1,xpd=TRUE)#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$DH,data$diference,col=as.character(data$color),xlab="",ylab="TS",main="C)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$DH,data$diference) ## it is 0.7920#
axis(2, at = c(-0.5,0,0.5),cex.axis=2)#
title (xlab="DH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
DHregression <- lm(data$diference~data$DH)#
segments(0,DHregression$coefficients[1],0.65,DHregression$coefficients[1] + 0.65*DHregression$coefficients[2],col="red",lwd=2,xlim=c(0,0.65))#
summary(DHregression)#
legend(0.3,-.26,c(expression(paste(rho," = 0.7920")),"Intercept = -0.0466","Beta = 1.1370","p-value < 2.2e-16"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot(1, type="n", axes=F, xlab="", ylab="")#
legend("topleft",c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=19,cex=2,title=expression(tau))#
dev.off()#
cor.test(data$DH,data$MSH) ## It is 0.9211#
cor.test(data$DH,data$P) ## It is -0.0992#
cor.test(data$P,data$MSH) ## It is -0.2696#
######### Alternative Figure with all the data#
data <- read.table("homoplasy_tau.txt",header=T)#
pdf("Figure2_AllData.pdf",height=14,width=14)#
require(car)#
library(viridis)#
Colors <- viridis(10, alpha = 0.5, begin = 0, end = 1, option = "D")#
data <- read.table("homoplasy_tau.txt",header=T)#
diference <- (data$IS_tau - data$tau)/data$IS_tau#
data <- cbind(data,diference)#
number <- 1:1000#
data <- cbind (data,number)#
colnum <-1#
cols<-Colors#
color <- c()#
for (i in number){#
    color <- c(color,cols[colnum])#
    if((i %% 100) == 0){#
        colnum <- colnum+1#
    }#
}#
data <- cbind(data,color)#
# data <- subset (data,data$diference>=-10)#
par(mfrow = c(2,2))#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$P,data$diference,col=as.character(data$color) ,xlab="",ylab="TS",main="A)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$P,data$diference) ## it is -0.1351#
axis(2,cex.axis=2)#
title (xlab="P", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
Pregression <- lm(data$diference~data$P)#
segments(0,Pregression$coefficients[1],0.65,Pregression$coefficients[1] + 0.65*Pregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,.125,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(Pregression)#
#legend(0.3,-.25,c(expression(paste(rho," = -0.1351")),"Intercept = 0.3812","Beta = -0.2323","p-value = 1.9e-5"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$MSH,data$diference,col=as.character(data$color),xlab = "",ylab="TS",main="B)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$MSH,data$diference) ## it is 0.7658#
axis(2,cex.axis=2)#
title (xlab="MSH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
MSHregression <- lm(data$diference~data$MSH)#
segments(0,MSHregression$coefficients[1],0.65,MSHregression$coefficients[1] + 0.65*MSHregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,0.25,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(MSHregression)#
#legend(0.3 ,-.25,c(expression(paste(rho," = 0.7658")),"Intercept = 0.1011","Beta = 0.9620","p-value < 2.2e-16"),cex=2,bty="n")#
#par(mar=c(5,6,4,10) + 0.1,xpd=TRUE)#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$DH,data$diference,col=as.character(data$color),xlab="",ylab="TS",main="C)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$DH,data$diference) ## it is 0.7920#
axis(2,cex.axis=2)#
title (xlab="DH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
DHregression <- lm(data$diference~data$DH)#
segments(0,DHregression$coefficients[1],0.65,DHregression$coefficients[1] + 0.65*DHregression$coefficients[2],col="red",lwd=2,xlim=c(0,0.65))#
summary(DHregression)#
#legend(0.3,-.26,c(expression(paste(rho," = 0.7920")),"Intercept = -0.0466","Beta = 1.1370","p-value < 2.2e-16"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot(1, type="n", axes=F, xlab="", ylab="")#
legend("topleft",c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=19,cex=2,title=expression(tau))#
dev.off()#
cor.test(data$DH,data$MSH) ## It is 0.9211#
cor.test(data$DH,data$P) ## It is -0.0992#
cor.test(data$P,data$MSH) ## It is -0.2696#
#### Data bigger than -10#
######### Alternative Figure with all the data#
data <- read.table("homoplasy_tau.txt",header=T)#
pdf("Figure2_DataBiggerThanMinusTen.pdf",height=14,width=14)#
require(car)#
library(viridis)#
Colors <- viridis(10, alpha = 0.5, begin = 0, end = 1, option = "D")#
data <- read.table("homoplasy_tau.txt",header=T)#
diference <- (data$IS_tau - data$tau)/data$IS_tau#
data <- cbind(data,diference)#
number <- 1:1000#
data <- cbind (data,number)#
colnum <-1#
cols<-Colors#
color <- c()#
for (i in number){#
    color <- c(color,cols[colnum])#
    if((i %% 100) == 0){#
        colnum <- colnum+1#
    }#
}#
data <- cbind(data,color)#
test <- subset (data,data$diference<=-10)#
data <- subset (data,data$diference>=-10)#
par(mfrow = c(2,2))#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$P,data$diference,col=as.character(data$color) ,xlab="",ylab="TS",main="A)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$P,data$diference) ## it is -0.1351#
axis(2,cex.axis=2)#
title (xlab="P", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
Pregression <- lm(data$diference~data$P)#
segments(0,Pregression$coefficients[1],0.65,Pregression$coefficients[1] + 0.65*Pregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,.125,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(Pregression)#
#legend(0.3,-.25,c(expression(paste(rho," = -0.1351")),"Intercept = 0.3812","Beta = -0.2323","p-value = 1.9e-5"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$MSH,data$diference,col=as.character(data$color),xlab = "",ylab="TS",main="B)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$MSH,data$diference) ## it is 0.7658#
axis(2,cex.axis=2)#
title (xlab="MSH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
MSHregression <- lm(data$diference~data$MSH)#
segments(0,MSHregression$coefficients[1],0.65,MSHregression$coefficients[1] + 0.65*MSHregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,0.25,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(MSHregression)#
#legend(0.3 ,-.25,c(expression(paste(rho," = 0.7658")),"Intercept = 0.1011","Beta = 0.9620","p-value < 2.2e-16"),cex=2,bty="n")#
#par(mar=c(5,6,4,10) + 0.1,xpd=TRUE)#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$DH,data$diference,col=as.character(data$color),xlab="",ylab="TS",main="C)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$DH,data$diference) ## it is 0.7920#
axis(2,cex.axis=2)#
title (xlab="DH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
DHregression <- lm(data$diference~data$DH)#
segments(0,DHregression$coefficients[1],0.65,DHregression$coefficients[1] + 0.65*DHregression$coefficients[2],col="red",lwd=2,xlim=c(0,0.65))#
summary(DHregression)#
#legend(0.3,-.26,c(expression(paste(rho," = 0.7920")),"Intercept = -0.0466","Beta = 1.1370","p-value < 2.2e-16"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot(1, type="n", axes=F, xlab="", ylab="")#
legend("topleft",c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=19,cex=2,title=expression(tau))#
dev.off()#
cor.test(data$DH,data$MSH) ## It is 0.9211#
cor.test(data$DH,data$P) ## It is -0.0992#
cor.test(data$P,data$MSH) ## It is -0.2696
######### Substitute the directory appropriately to read the data!#
#
############# Set 1#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set1")#
#
library(viridis)#
P <- c()#
MSH <- c()#
DH <- c()#
P_estimate <- c()#
MSH_estimate <- c()#
DH_estimate <- c()#
real_tau <- c()#
real_theta0 <- c()#
real_theta1 <- c()#
tau_ABC <- c()#
theta0_ABC <- c()#
theta1_ABC <- c()#
number_archives <- 1:100#
#
RelativeBiasP <- c(0,0,0)#
RelativeBiasMeanP <- c(0,0,0)#
RelativeBiasMedianP <- c(0,0,0)#
#
RelativeBiasDH <- c(0,0,0)#
RelativeBiasMeanDH <- c(0,0,0)#
RelativeBiasMedianDH <- c(0,0,0)#
#
RelativeBiasMSH <- c(0,0,0)#
RelativeBiasMeanMSH <- c(0,0,0)#
RelativeBiasMedianMSH <- c(0,0,0)#
#
Coverage50P <- c(0,0,0)#
Coverage75P <- c(0,0,0)#
Coverage90P <- c(0,0,0)#
#
Coverage50MSH <- c(0,0,0)#
Coverage75MSH <- c(0,0,0)#
Coverage90MSH <- c(0,0,0)#
#
Coverage50DH <- c(0,0,0)#
Coverage75DH <- c(0,0,0)#
Coverage90DH <- c(0,0,0)#
#
for (i in number_archives){#
	archive <- paste(i,".out",sep="")#
	dat <- read.table(archive,header=T)#
	print(nrow(dat))#
	print (i)#
	u = 5.5 *( 10^(-5))#
	L=6#
	Theta1= dat$T1#
	N=Theta1/(2*L*u)#
	tMS=dat$Time#
	timeMS = tMS*2*N#
	timeAR = (2*L*u)*timeMS#
	d <- density(timeAR)#
	tau_ABC[i] <- d$x[d$y==max(d$y)]#
	real_tau[i] <- 3#
	d <- density(dat$T1)#
	theta1_ABC[i] <- d$x[d$y==max(d$y)]#
	d <- density(dat$SASHloc)#
	MSH_estimate[i] <- d$x[d$y==max(d$y)]#
	d <- density(dat$SASH)#
	P_estimate[i] <- d$x[d$y==max(d$y)]#
	d <- density(dat$SHdist)#
	DH_estimate[i] <- d$x[d$y==max(d$y)]	#
	real_theta1[i] <- 30#
	real_theta0[i] <- 0.03#
	homoplasy_archive <- paste(i,"homoplasy.txt",sep="")#
	homoplasy <- read.table(homoplasy_archive,header=T)#
	MSH[i] <- homoplasy$Sizehomoplasyloc#
	P[i] <- homoplasy$SASH#
	DH[i] <- homoplasy$SHdist#
    QuantilesMSH <-quantile(dat$SASHloc,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
    QuantilesDH <-quantile(dat$SHdist,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
    QuantilesP <-quantile(dat$SASH,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
    if ((P[i] >QuantilesP[3]) && (P[i] < QuantilesP[5])){#
        Coverage50P[1] <- Coverage50P[1] + 1#
    }#
    if ((P[i] >QuantilesP[2]) && (P[i] < QuantilesP[6])){#
        Coverage75P[1] <- Coverage75P[1] + 1#
    }#
    if ((P[i] >QuantilesP[1]) && (P[i] < QuantilesP[7])){#
        Coverage90P[1] <- Coverage90P[1] + 1#
    }#
    if ((MSH[i] >QuantilesMSH[3]) && (MSH[i] < QuantilesMSH[5])){#
        Coverage50MSH[1] <- Coverage50MSH[1] + 1#
    }#
    if ((MSH[i] >QuantilesMSH[2]) && (MSH[i] < QuantilesMSH[6])){#
        Coverage75MSH[1] <- Coverage75MSH[1] + 1#
    }#
    if ((MSH[i] >QuantilesMSH[1]) && (MSH[i] < QuantilesMSH[7])){#
        Coverage90MSH[1] <- Coverage90MSH[1] + 1#
    }#
    if ((DH[i] >QuantilesDH[3]) && (DH[i] < QuantilesDH[5])){#
        Coverage50DH[1] <- Coverage50DH[1] + 1#
    }#
    if ((DH[i] >QuantilesDH[2]) && (DH[i] < QuantilesDH[6])){#
        Coverage75DH[1] <- Coverage75DH[1] + 1#
    }#
    if ((DH[i] >QuantilesDH[1]) && (DH[i] < QuantilesDH[7])){#
        Coverage90DH[1] <- Coverage90DH[1] + 1#
    }#
#
}#
P[P==0] <- NA#
RelativeBiasP[1] <- mean((P_estimate-P)/P, na.rm=TRUE)#
RelativeBiasMSH[1] <- mean((MSH_estimate-MSH)/MSH)#
RelativeBiasDH[1] <- mean((DH_estimate-DH)/DH)#
# Add colors#
number <- 1:100#
cols <- Colors <- viridis(10, alpha = 0.5, begin = 0, end = 1, option = "D")#
#
color <- c()#
colnum <- 1#
for (i in number){#
color[i] <- cols[colnum]#
	if (i %% 10 == 0){#
		colnum <- colnum + 1#
	}#
}#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3")#
pdf("Figure3.pdf",width=14,height=14)#
par(mfrow=c(2,2))#
par(mar=c(5,6,4,2) + 0.1)#
plot(P, P_estimate, col = as.character(color),xlab="P true value", ylab= "Estimate of P", main ="A)", cex.lab = 3, cex.main = 3, cex.axis = 2, pch=19, cex=2,xlim=c(0,0.65),ylim=c(0,0.37))#
#title(xlab = "P true value",cex.lab=2)#
#mtext("Estimate of P", WEST <- 2, at = 0.2, line = 2, cex = 2)#
Pregression <- lm (P_estimate~P)#
cor(P,P_estimate)#
#abline (Pregression)#
summary (Pregression)#
# legend ("topleft",c(expression(paste(rho," = 0.4864")),"Intercept = 0.0385","Beta = 0.3104","p-value = 2.88e-7"),bty="n", cex = 2.5)#
# legend (0.04, 0.33, c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"), col = cols, title = "Tau", cex = 1.25, pch=19)#
segments(0,Pregression$coefficients[1],0.65,Pregression$coefficients[1] + 0.65*Pregression$coefficients[2],lwd=2,xlim=c(0,0.65))#
plot(MSH, MSH_estimate, col = as.character(color), xlab="MSH true value", ylab= "Estimate of MSH", main ="B)", cex.lab = 3, cex.main = 3, cex.axis = 2, pch=19, cex=2,xlim=c(0,0.65))#
#title(xlab = "MSH true value",cex.lab=2)#
#mtext("Estimate of MSH", WEST <- 2, at = 0.25, line = 2, cex = 2)#
MSHregression <- lm (MSH_estimate~MSH)#
cor(MSH,MSH_estimate)#
#abline (MSHregression)#
summary (MSHregression)#
# legend ("topleft",c(expression(paste(rho," = 0.8809")),"Intercept = 0.0220","Beta = 0.8667","p-value < 2.2e-16"),bty="n", cex = 2.5)#
segments(0,MSHregression$coefficients[1],0.65,MSHregression$coefficients[1] + 0.65*MSHregression$coefficients[2],lwd=2,xlim=c(0,0.65))#
#
#legend (0.0, 0.5, c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"), col = cols, title = "Tau", cex = 1.25, pch=19)#
#
#par(mar=c(5,6,4,10) + 0.1,xpd=TRUE)#
par(mar=c(5,6,4,2) + 0.1)#
#
plot(DH, DH_estimate, col = as.character(color),xlab="DH true value", ylab= "Estimate of DH", main ="C)", cex.lab = 3, cex.main = 3, cex.axis = 2, pch=19, cex=2,xlim=c(0,0.65))#
#title(xlab = "DH true value",cex.lab=2)#
#mtext("Estimate of DH", WEST <- 2, at = 0.35, line = 2, cex = 2)#
DHregression <- lm (DH_estimate~DH)#
cor(DH,DH_estimate)#
#abline (DHregression)#
summary (DHregression)#
# legend ("topleft",c(expression(paste(rho," = 0.7399")),"Intercept = 0.0512","Beta = 0.8771","p-value < 2.2e-16"),bty="n", cex = 2.5)#
segments(0,DHregression$coefficients[1],0.65,DHregression$coefficients[1] + 0.65*DHregression$coefficients[2],lwd=2,xlim=c(0,0.65))#
#
#legend (.35,.15,c("Intercept = 0.0512","Beta = 0.8771","p-value < 2.2e-16"),bty="n", cex = 1.5)#
# legend (0.1, 0.65, c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"), col = cols, title = "Tau", cex = 1.25, pch=19)#
#
par(mar=c(5,6,4,2) + 0.1)#
plot(1, type="n", axes=F, xlab="", ylab="")#
#
legend("topleft",c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=19,cex=2,title=expression(tau))#
#
dev.off()
######### Substitute the directory appropriately to read the data!#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure2")#
require(car)#
library(viridis)#
Colors <- viridis(10, alpha = 0.5, begin = 0, end = 1, option = "D")#
data <- read.table("homoplasy_tau.txt",header=T)#
diference <- (data$IS_tau - data$tau)/data$IS_tau#
data <- cbind(data,diference)#
number <- 1:1000#
data <- cbind (data,number)#
colnum <-1#
cols<-Colors#
color <- c()#
for (i in number){#
color <- c(color,cols[colnum])#
if((i %% 100) == 0){#
colnum <- colnum+1#
}#
}#
data <- cbind(data,color)#
test <- subset (data,data$diference< -1)#
data <- subset (data,data$diference>=-1)#
#pdf("Figure1.pdf",width=36)#
pdf("Figure2.pdf",height=14,width=14)#
par(mfrow = c(2,2))#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$P,data$diference,col=as.character(data$color) ,xlab="",ylab="TS",main="A)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$P,data$diference) ## it is -0.1351#
axis(2, at = c(-0.5,0,0.5),cex.axis=2)#
title (xlab="P", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
Pregression <- lm(data$diference~data$P)#
segments(0,Pregression$coefficients[1],0.65,Pregression$coefficients[1] + 0.65*Pregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,.125,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(Pregression)#
legend(0.3,-.25,c(expression(paste(rho," = -0.1351")),"Intercept = 0.3812","Beta = -0.2323","p-value = 1.9e-5"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$MSH,data$diference,col=as.character(data$color),xlab = "",ylab="TS",main="B)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$MSH,data$diference) ## it is 0.7658#
axis(2, at = c(-0.5,0,0.5),cex.axis=2)#
title (xlab="MSH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
MSHregression <- lm(data$diference~data$MSH)#
segments(0,MSHregression$coefficients[1],0.65,MSHregression$coefficients[1] + 0.65*MSHregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,0.25,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(MSHregression)#
legend(0.3 ,-.25,c(expression(paste(rho," = 0.7658")),"Intercept = 0.1011","Beta = 0.9620","p-value < 2.2e-16"),cex=2,bty="n")#
#par(mar=c(5,6,4,10) + 0.1,xpd=TRUE)#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$DH,data$diference,col=as.character(data$color),xlab="",ylab="TS",main="C)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$DH,data$diference) ## it is 0.7920#
axis(2, at = c(-0.5,0,0.5),cex.axis=2)#
title (xlab="DH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
DHregression <- lm(data$diference~data$DH)#
segments(0,DHregression$coefficients[1],0.65,DHregression$coefficients[1] + 0.65*DHregression$coefficients[2],col="red",lwd=2,xlim=c(0,0.65))#
summary(DHregression)#
legend(0.3,-.26,c(expression(paste(rho," = 0.7920")),"Intercept = -0.0466","Beta = 1.1370","p-value < 2.2e-16"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot(1, type="n", axes=F, xlab="", ylab="")#
legend("topleft",c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=19,cex=2,title=expression(tau))#
dev.off()#
cor.test(data$DH,data$MSH) ## It is 0.9211#
cor.test(data$DH,data$P) ## It is -0.0992#
cor.test(data$P,data$MSH) ## It is -0.2696#
######### Alternative Figure with all the data#
data <- read.table("homoplasy_tau.txt",header=T)#
pdf("Figure2_AllData.pdf",height=14,width=14)#
require(car)#
library(viridis)#
Colors <- viridis(10, alpha = 0.5, begin = 0, end = 1, option = "D")#
data <- read.table("homoplasy_tau.txt",header=T)#
diference <- (data$IS_tau - data$tau)/data$IS_tau#
data <- cbind(data,diference)#
number <- 1:1000#
data <- cbind (data,number)#
colnum <-1#
cols<-Colors#
color <- c()#
for (i in number){#
    color <- c(color,cols[colnum])#
    if((i %% 100) == 0){#
        colnum <- colnum+1#
    }#
}#
data <- cbind(data,color)#
# data <- subset (data,data$diference>=-10)#
par(mfrow = c(2,2))#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$P,data$diference,col=as.character(data$color) ,xlab="",ylab="TS",main="A)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$P,data$diference) ## it is -0.1351#
axis(2,cex.axis=2)#
title (xlab="P", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
Pregression <- lm(data$diference~data$P)#
segments(0,Pregression$coefficients[1],0.65,Pregression$coefficients[1] + 0.65*Pregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,.125,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(Pregression)#
#legend(0.3,-.25,c(expression(paste(rho," = -0.1351")),"Intercept = 0.3812","Beta = -0.2323","p-value = 1.9e-5"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$MSH,data$diference,col=as.character(data$color),xlab = "",ylab="TS",main="B)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$MSH,data$diference) ## it is 0.7658#
axis(2,cex.axis=2)#
title (xlab="MSH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
MSHregression <- lm(data$diference~data$MSH)#
segments(0,MSHregression$coefficients[1],0.65,MSHregression$coefficients[1] + 0.65*MSHregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,0.25,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(MSHregression)#
#legend(0.3 ,-.25,c(expression(paste(rho," = 0.7658")),"Intercept = 0.1011","Beta = 0.9620","p-value < 2.2e-16"),cex=2,bty="n")#
#par(mar=c(5,6,4,10) + 0.1,xpd=TRUE)#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$DH,data$diference,col=as.character(data$color),xlab="",ylab="TS",main="C)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$DH,data$diference) ## it is 0.7920#
axis(2,cex.axis=2)#
title (xlab="DH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
DHregression <- lm(data$diference~data$DH)#
segments(0,DHregression$coefficients[1],0.65,DHregression$coefficients[1] + 0.65*DHregression$coefficients[2],col="red",lwd=2,xlim=c(0,0.65))#
summary(DHregression)#
#legend(0.3,-.26,c(expression(paste(rho," = 0.7920")),"Intercept = -0.0466","Beta = 1.1370","p-value < 2.2e-16"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot(1, type="n", axes=F, xlab="", ylab="")#
legend("topleft",c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=19,cex=2,title=expression(tau))#
dev.off()#
cor.test(data$DH,data$MSH) ## It is 0.9211#
cor.test(data$DH,data$P) ## It is -0.0992#
cor.test(data$P,data$MSH) ## It is -0.2696#
#### Data bigger than -10#
######### Alternative Figure with all the data#
data <- read.table("homoplasy_tau.txt",header=T)#
pdf("Figure2_DataBiggerThanMinusTen.pdf",height=14,width=14)#
require(car)#
library(viridis)#
Colors <- viridis(10, alpha = 0.5, begin = 0, end = 1, option = "D")#
data <- read.table("homoplasy_tau.txt",header=T)#
diference <- (data$IS_tau - data$tau)/data$IS_tau#
data <- cbind(data,diference)#
number <- 1:1000#
data <- cbind (data,number)#
colnum <-1#
cols<-Colors#
color <- c()#
for (i in number){#
    color <- c(color,cols[colnum])#
    if((i %% 100) == 0){#
        colnum <- colnum+1#
    }#
}#
data <- cbind(data,color)#
test <- subset (data,data$diference<=-10)#
data <- subset (data,data$diference>=-10)#
par(mfrow = c(2,2))#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$P,data$diference,col=as.character(data$color) ,xlab="",ylab="TS",main="A)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$P,data$diference) ## it is -0.1351#
axis(2,cex.axis=2)#
title (xlab="P", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
Pregression <- lm(data$diference~data$P)#
segments(0,Pregression$coefficients[1],0.65,Pregression$coefficients[1] + 0.65*Pregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,.125,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(Pregression)#
#legend(0.3,-.25,c(expression(paste(rho," = -0.1351")),"Intercept = 0.3812","Beta = -0.2323","p-value = 1.9e-5"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$MSH,data$diference,col=as.character(data$color),xlab = "",ylab="TS",main="B)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$MSH,data$diference) ## it is 0.7658#
axis(2,cex.axis=2)#
title (xlab="MSH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
MSHregression <- lm(data$diference~data$MSH)#
segments(0,MSHregression$coefficients[1],0.65,MSHregression$coefficients[1] + 0.65*MSHregression$coefficients[2],col="red",lwd=2)#
#legend(0.5,0.25,c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=1,cex=1.25,title="Tau")#
summary(MSHregression)#
#legend(0.3 ,-.25,c(expression(paste(rho," = 0.6903")),"Intercept = 0.0893","Beta = 0.9868","p-value < 2.2e-16"),cex=2,bty="n")#
#par(mar=c(5,6,4,10) + 0.1,xpd=TRUE)#
par(mar=c(5,6,4,2) + 0.1)#
plot (data$DH,data$diference,col=as.character(data$color),xlab="",ylab="TS",main="C)",cex.lab = 3, cex.main = 3.0,cex.axis = 2,xlim=c(0,0.65),yaxt="n",pch=19, cex=2)#
cor(data$DH,data$diference) ## it is 0.7920#
axis(2,cex.axis=2)#
title (xlab="DH", cex.lab=3)#
#mtext ("Tau skew ",WEST <-2, at = 0, line = 2, cex = 2)#
DHregression <- lm(data$diference~data$DH)#
segments(0,DHregression$coefficients[1],0.65,DHregression$coefficients[1] + 0.65*DHregression$coefficients[2],col="red",lwd=2,xlim=c(0,0.65))#
summary(DHregression)#
#legend(0.3,-.26,c(expression(paste(rho," = 0.6989")),"Intercept = -0.0541","Beta = 1.1424","p-value < 2.2e-16"),cex=2,bty="n")#
par(mar=c(5,6,4,2) + 0.1)#
plot(1, type="n", axes=F, xlab="", ylab="")#
legend("topleft",c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=19,cex=2,title=expression(tau))#
dev.off()#
cor.test(data$DH,data$MSH) ## It is 0.9208#
cor.test(data$DH,data$P) ## It is -0.0976#
cor.test(data$P,data$MSH) ## It is -0.2685
######### Substitute the directory appropriately to read the data!#
#
############# Set 1#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set1")#
#
library(viridis)#
P <- c()#
MSH <- c()#
DH <- c()#
P_estimate <- c()#
MSH_estimate <- c()#
DH_estimate <- c()#
real_tau <- c()#
real_theta0 <- c()#
real_theta1 <- c()#
tau_ABC <- c()#
theta0_ABC <- c()#
theta1_ABC <- c()#
number_archives <- 1:100#
#
RelativeBiasP <- c(0,0,0)#
RelativeBiasMeanP <- c(0,0,0)#
RelativeBiasMedianP <- c(0,0,0)#
#
RelativeBiasDH <- c(0,0,0)#
RelativeBiasMeanDH <- c(0,0,0)#
RelativeBiasMedianDH <- c(0,0,0)#
#
RelativeBiasMSH <- c(0,0,0)#
RelativeBiasMeanMSH <- c(0,0,0)#
RelativeBiasMedianMSH <- c(0,0,0)#
#
Coverage50P <- c(0,0,0)#
Coverage75P <- c(0,0,0)#
Coverage90P <- c(0,0,0)#
#
Coverage50MSH <- c(0,0,0)#
Coverage75MSH <- c(0,0,0)#
Coverage90MSH <- c(0,0,0)#
#
Coverage50DH <- c(0,0,0)#
Coverage75DH <- c(0,0,0)#
Coverage90DH <- c(0,0,0)#
#
for (i in number_archives){#
	archive <- paste(i,".out",sep="")#
	dat <- read.table(archive,header=T)#
	print(nrow(dat))#
	print (i)#
	u = 5.5 *( 10^(-5))#
	L=6#
	Theta1= dat$T1#
	N=Theta1/(2*L*u)#
	tMS=dat$Time#
	timeMS = tMS*2*N#
	timeAR = (2*L*u)*timeMS#
	d <- density(timeAR)#
	tau_ABC[i] <- d$x[d$y==max(d$y)]#
	real_tau[i] <- 3#
	d <- density(dat$T1)#
	theta1_ABC[i] <- d$x[d$y==max(d$y)]#
	d <- density(dat$SASHloc)#
	MSH_estimate[i] <- d$x[d$y==max(d$y)]#
	d <- density(dat$SASH)#
	P_estimate[i] <- d$x[d$y==max(d$y)]#
	d <- density(dat$SHdist)#
	DH_estimate[i] <- d$x[d$y==max(d$y)]	#
	real_theta1[i] <- 30#
	real_theta0[i] <- 0.03#
	homoplasy_archive <- paste(i,"homoplasy.txt",sep="")#
	homoplasy <- read.table(homoplasy_archive,header=T)#
	MSH[i] <- homoplasy$Sizehomoplasyloc#
	P[i] <- homoplasy$SASH#
	DH[i] <- homoplasy$SHdist#
    QuantilesMSH <-quantile(dat$SASHloc,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
    QuantilesDH <-quantile(dat$SHdist,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
    QuantilesP <-quantile(dat$SASH,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
    if ((P[i] >QuantilesP[3]) && (P[i] < QuantilesP[5])){#
        Coverage50P[1] <- Coverage50P[1] + 1#
    }#
    if ((P[i] >QuantilesP[2]) && (P[i] < QuantilesP[6])){#
        Coverage75P[1] <- Coverage75P[1] + 1#
    }#
    if ((P[i] >QuantilesP[1]) && (P[i] < QuantilesP[7])){#
        Coverage90P[1] <- Coverage90P[1] + 1#
    }#
    if ((MSH[i] >QuantilesMSH[3]) && (MSH[i] < QuantilesMSH[5])){#
        Coverage50MSH[1] <- Coverage50MSH[1] + 1#
    }#
    if ((MSH[i] >QuantilesMSH[2]) && (MSH[i] < QuantilesMSH[6])){#
        Coverage75MSH[1] <- Coverage75MSH[1] + 1#
    }#
    if ((MSH[i] >QuantilesMSH[1]) && (MSH[i] < QuantilesMSH[7])){#
        Coverage90MSH[1] <- Coverage90MSH[1] + 1#
    }#
    if ((DH[i] >QuantilesDH[3]) && (DH[i] < QuantilesDH[5])){#
        Coverage50DH[1] <- Coverage50DH[1] + 1#
    }#
    if ((DH[i] >QuantilesDH[2]) && (DH[i] < QuantilesDH[6])){#
        Coverage75DH[1] <- Coverage75DH[1] + 1#
    }#
    if ((DH[i] >QuantilesDH[1]) && (DH[i] < QuantilesDH[7])){#
        Coverage90DH[1] <- Coverage90DH[1] + 1#
    }#
#
}#
P[P==0] <- NA#
RelativeBiasP[1] <- mean((P_estimate-P)/P, na.rm=TRUE)#
RelativeBiasMSH[1] <- mean((MSH_estimate-MSH)/MSH)#
RelativeBiasDH[1] <- mean((DH_estimate-DH)/DH)#
# Add colors#
number <- 1:100#
cols <- Colors <- viridis(10, alpha = 0.5, begin = 0, end = 1, option = "D")#
#
color <- c()#
colnum <- 1#
for (i in number){#
color[i] <- cols[colnum]#
	if (i %% 10 == 0){#
		colnum <- colnum + 1#
	}#
}#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3")#
pdf("Figure3.pdf",width=14,height=14)#
par(mfrow=c(2,2))#
par(mar=c(5,6,4,2) + 0.1)#
plot(P, P_estimate, col = as.character(color),xlab="P true value", ylab= "Estimate of P", main ="A)", cex.lab = 3, cex.main = 3, cex.axis = 2, pch=19, cex=2,xlim=c(0,0.65),ylim=c(0,0.37))#
#title(xlab = "P true value",cex.lab=2)#
#mtext("Estimate of P", WEST <- 2, at = 0.2, line = 2, cex = 2)#
Pregression <- lm (P_estimate~P)#
cor(P,P_estimate)#
#abline (Pregression)#
summary (Pregression)#
# legend ("topleft",c(expression(paste(rho," = 0.4864")),"Intercept = 0.0385","Beta = 0.3104","p-value = 2.88e-7"),bty="n", cex = 2.5)#
# legend (0.04, 0.33, c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"), col = cols, title = "Tau", cex = 1.25, pch=19)#
segments(0,Pregression$coefficients[1],0.65,Pregression$coefficients[1] + 0.65*Pregression$coefficients[2],lwd=2,xlim=c(0,0.65))#
plot(MSH, MSH_estimate, col = as.character(color), xlab="MSH true value", ylab= "Estimate of MSH", main ="B)", cex.lab = 3, cex.main = 3, cex.axis = 2, pch=19, cex=2,xlim=c(0,0.65))#
#title(xlab = "MSH true value",cex.lab=2)#
#mtext("Estimate of MSH", WEST <- 2, at = 0.25, line = 2, cex = 2)#
MSHregression <- lm (MSH_estimate~MSH)#
cor(MSH,MSH_estimate)#
#abline (MSHregression)#
summary (MSHregression)#
# legend ("topleft",c(expression(paste(rho," = 0.8809")),"Intercept = 0.0220","Beta = 0.8667","p-value < 2.2e-16"),bty="n", cex = 2.5)#
segments(0,MSHregression$coefficients[1],0.65,MSHregression$coefficients[1] + 0.65*MSHregression$coefficients[2],lwd=2,xlim=c(0,0.65))#
#
#legend (0.0, 0.5, c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"), col = cols, title = "Tau", cex = 1.25, pch=19)#
#
#par(mar=c(5,6,4,10) + 0.1,xpd=TRUE)#
par(mar=c(5,6,4,2) + 0.1)#
#
plot(DH, DH_estimate, col = as.character(color),xlab="DH true value", ylab= "Estimate of DH", main ="C)", cex.lab = 3, cex.main = 3, cex.axis = 2, pch=19, cex=2,xlim=c(0,0.65))#
#title(xlab = "DH true value",cex.lab=2)#
#mtext("Estimate of DH", WEST <- 2, at = 0.35, line = 2, cex = 2)#
DHregression <- lm (DH_estimate~DH)#
cor(DH,DH_estimate)#
#abline (DHregression)#
summary (DHregression)#
# legend ("topleft",c(expression(paste(rho," = 0.7399")),"Intercept = 0.0512","Beta = 0.8771","p-value < 2.2e-16"),bty="n", cex = 2.5)#
segments(0,DHregression$coefficients[1],0.65,DHregression$coefficients[1] + 0.65*DHregression$coefficients[2],lwd=2,xlim=c(0,0.65))#
#
#legend (.35,.15,c("Intercept = 0.0512","Beta = 0.8771","p-value < 2.2e-16"),bty="n", cex = 1.5)#
# legend (0.1, 0.65, c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"), col = cols, title = "Tau", cex = 1.25, pch=19)#
#
par(mar=c(5,6,4,2) + 0.1)#
plot(1, type="n", axes=F, xlab="", ylab="")#
#
legend("topleft",c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=19,cex=2,title=expression(tau))#
#
dev.off()
P
P_estimate
######### Substitute the directory appropriately to read the data!#
#
############# Set 1#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set1")#
#
library(viridis)#
P <- c()#
MSH <- c()#
DH <- c()#
P_estimate <- c()#
MSH_estimate <- c()#
DH_estimate <- c()#
real_tau <- c()#
real_theta0 <- c()#
real_theta1 <- c()#
tau_ABC <- c()#
theta0_ABC <- c()#
theta1_ABC <- c()#
number_archives <- 1:100#
#
RelativeBiasP <- c(0,0,0)#
RelativeBiasMeanP <- c(0,0,0)#
RelativeBiasMedianP <- c(0,0,0)#
#
RelativeBiasDH <- c(0,0,0)#
RelativeBiasMeanDH <- c(0,0,0)#
RelativeBiasMedianDH <- c(0,0,0)#
#
RelativeBiasMSH <- c(0,0,0)#
RelativeBiasMeanMSH <- c(0,0,0)#
RelativeBiasMedianMSH <- c(0,0,0)#
#
Coverage50P <- c(0,0,0)#
Coverage75P <- c(0,0,0)#
Coverage90P <- c(0,0,0)#
#
Coverage50MSH <- c(0,0,0)#
Coverage75MSH <- c(0,0,0)#
Coverage90MSH <- c(0,0,0)#
#
Coverage50DH <- c(0,0,0)#
Coverage75DH <- c(0,0,0)#
Coverage90DH <- c(0,0,0)#
#
for (i in number_archives){#
	archive <- paste(i,".out",sep="")#
	dat <- read.table(archive,header=T)#
	print(nrow(dat))#
	print (i)#
	u = 5.5 *( 10^(-5))#
	L=6#
	Theta1= dat$T1#
	N=Theta1/(2*L*u)#
	tMS=dat$Time#
	timeMS = tMS*2*N#
	timeAR = (2*L*u)*timeMS#
	d <- density(timeAR)#
	tau_ABC[i] <- d$x[d$y==max(d$y)]#
	real_tau[i] <- 3#
	d <- density(dat$T1)#
	theta1_ABC[i] <- d$x[d$y==max(d$y)]#
	d <- density(dat$SASHloc)#
	MSH_estimate[i] <- d$x[d$y==max(d$y)]#
	d <- density(dat$SASH)#
	P_estimate[i] <- d$x[d$y==max(d$y)]#
	d <- density(dat$SHdist)#
	DH_estimate[i] <- d$x[d$y==max(d$y)]	#
	real_theta1[i] <- 30#
	real_theta0[i] <- 0.03#
	homoplasy_archive <- paste(i,"homoplasy.txt",sep="")#
	homoplasy <- read.table(homoplasy_archive,header=T)#
	MSH[i] <- homoplasy$Sizehomoplasyloc#
	P[i] <- homoplasy$SASH#
	DH[i] <- homoplasy$SHdist#
    QuantilesMSH <-quantile(dat$SASHloc,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
    QuantilesDH <-quantile(dat$SHdist,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
    QuantilesP <-quantile(dat$SASH,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
    if ((P[i] >QuantilesP[3]) && (P[i] < QuantilesP[5])){#
        Coverage50P[1] <- Coverage50P[1] + 1#
    }#
    if ((P[i] >QuantilesP[2]) && (P[i] < QuantilesP[6])){#
        Coverage75P[1] <- Coverage75P[1] + 1#
    }#
    if ((P[i] >QuantilesP[1]) && (P[i] < QuantilesP[7])){#
        Coverage90P[1] <- Coverage90P[1] + 1#
    }#
    if ((MSH[i] >QuantilesMSH[3]) && (MSH[i] < QuantilesMSH[5])){#
        Coverage50MSH[1] <- Coverage50MSH[1] + 1#
    }#
    if ((MSH[i] >QuantilesMSH[2]) && (MSH[i] < QuantilesMSH[6])){#
        Coverage75MSH[1] <- Coverage75MSH[1] + 1#
    }#
    if ((MSH[i] >QuantilesMSH[1]) && (MSH[i] < QuantilesMSH[7])){#
        Coverage90MSH[1] <- Coverage90MSH[1] + 1#
    }#
    if ((DH[i] >QuantilesDH[3]) && (DH[i] < QuantilesDH[5])){#
        Coverage50DH[1] <- Coverage50DH[1] + 1#
    }#
    if ((DH[i] >QuantilesDH[2]) && (DH[i] < QuantilesDH[6])){#
        Coverage75DH[1] <- Coverage75DH[1] + 1#
    }#
    if ((DH[i] >QuantilesDH[1]) && (DH[i] < QuantilesDH[7])){#
        Coverage90DH[1] <- Coverage90DH[1] + 1#
    }#
#
}#
# Add colors#
number <- 1:100#
cols <- Colors <- viridis(10, alpha = 0.5, begin = 0, end = 1, option = "D")#
#
color <- c()#
colnum <- 1#
for (i in number){#
color[i] <- cols[colnum]#
	if (i %% 10 == 0){#
		colnum <- colnum + 1#
	}#
}#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3")#
pdf("Figure3.pdf",width=14,height=14)#
par(mfrow=c(2,2))#
par(mar=c(5,6,4,2) + 0.1)#
plot(P, P_estimate, col = as.character(color),xlab="P true value", ylab= "Estimate of P", main ="A)", cex.lab = 3, cex.main = 3, cex.axis = 2, pch=19, cex=2,xlim=c(0,0.65),ylim=c(0,0.37))#
#title(xlab = "P true value",cex.lab=2)#
#mtext("Estimate of P", WEST <- 2, at = 0.2, line = 2, cex = 2)#
Pregression <- lm (P_estimate~P)#
cor(P,P_estimate)#
#abline (Pregression)#
summary (Pregression)#
# legend ("topleft",c(expression(paste(rho," = 0.4864")),"Intercept = 0.0385","Beta = 0.3104","p-value = 2.88e-7"),bty="n", cex = 2.5)#
# legend (0.04, 0.33, c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"), col = cols, title = "Tau", cex = 1.25, pch=19)#
segments(0,Pregression$coefficients[1],0.65,Pregression$coefficients[1] + 0.65*Pregression$coefficients[2],lwd=2,xlim=c(0,0.65))#
plot(MSH, MSH_estimate, col = as.character(color), xlab="MSH true value", ylab= "Estimate of MSH", main ="B)", cex.lab = 3, cex.main = 3, cex.axis = 2, pch=19, cex=2,xlim=c(0,0.65))#
#title(xlab = "MSH true value",cex.lab=2)#
#mtext("Estimate of MSH", WEST <- 2, at = 0.25, line = 2, cex = 2)#
MSHregression <- lm (MSH_estimate~MSH)#
cor(MSH,MSH_estimate)#
#abline (MSHregression)#
summary (MSHregression)#
# legend ("topleft",c(expression(paste(rho," = 0.8809")),"Intercept = 0.0220","Beta = 0.8667","p-value < 2.2e-16"),bty="n", cex = 2.5)#
segments(0,MSHregression$coefficients[1],0.65,MSHregression$coefficients[1] + 0.65*MSHregression$coefficients[2],lwd=2,xlim=c(0,0.65))#
#
#legend (0.0, 0.5, c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"), col = cols, title = "Tau", cex = 1.25, pch=19)#
#
#par(mar=c(5,6,4,10) + 0.1,xpd=TRUE)#
par(mar=c(5,6,4,2) + 0.1)#
#
plot(DH, DH_estimate, col = as.character(color),xlab="DH true value", ylab= "Estimate of DH", main ="C)", cex.lab = 3, cex.main = 3, cex.axis = 2, pch=19, cex=2,xlim=c(0,0.65))#
#title(xlab = "DH true value",cex.lab=2)#
#mtext("Estimate of DH", WEST <- 2, at = 0.35, line = 2, cex = 2)#
DHregression <- lm (DH_estimate~DH)#
cor(DH,DH_estimate)#
#abline (DHregression)#
summary (DHregression)#
# legend ("topleft",c(expression(paste(rho," = 0.7399")),"Intercept = 0.0512","Beta = 0.8771","p-value < 2.2e-16"),bty="n", cex = 2.5)#
segments(0,DHregression$coefficients[1],0.65,DHregression$coefficients[1] + 0.65*DHregression$coefficients[2],lwd=2,xlim=c(0,0.65))#
#
#legend (.35,.15,c("Intercept = 0.0512","Beta = 0.8771","p-value < 2.2e-16"),bty="n", cex = 1.5)#
# legend (0.1, 0.65, c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"), col = cols, title = "Tau", cex = 1.25, pch=19)#
#
par(mar=c(5,6,4,2) + 0.1)#
plot(1, type="n", axes=F, xlab="", ylab="")#
#
legend("topleft",c("1.5","3","4.5","6","7.5","9","10.5","12","13.5","15"),col=cols,pch=19,cex=2,title=expression(tau))#
#
dev.off()#
#
P[P==0] <- NA#
RelativeBiasP[1] <- mean((P_estimate-P)/P, na.rm=TRUE)#
RelativeBiasMSH[1] <- mean((MSH_estimate-MSH)/MSH)#
RelativeBiasDH[1] <- mean((DH_estimate-DH)/DH)
