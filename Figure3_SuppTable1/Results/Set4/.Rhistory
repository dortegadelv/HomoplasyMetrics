DataGeo <- read.table("~/Dropbox/Documents/Berkeley/FstProject/ReichLabDatasets/Haak2015PublicData/Scripts/PresentDayGeoVsPresentDayGeographicDistance.txt",header=TRUE)
DataGeo
540/11
43.37+9.03+158.75+24.73+20+6.21+5.43+7.04+20.00+8.07+4.27
306.9/2
153.45 - (47.36-16.19-24.53)/2
153.45 - (47.36+16.19+24.53)/2
153.45 - (47.36+16.19)/2
153.45 - (47.36+16.19+24.53)/2
153.45 - (47.36+16.19+24.53)/2 + 14.82/2
48151501-48761234
48151501 - 48761234
11100/3
0.0022
?rexp
pexp(.50,0.0022)
qexp(.50,0.0022)
315*25
qexp(.95,0.0022)
qexp(.95,0.0022)*25
qexp(.99,0.0022)*25
48625694-48565127
60567*1e-8
qexp(.95,0.0006)*3
qexp(.50,0.0006)*3
qexp(.99,0.0006)*3
qexp(.99,0.0012)*3
qexp(.95,0.0012)*3
49542795-49822148
33.0843607570605 - 32.3436064678035
0.7407543/279353
2.651678e-06*.01
2.651678e-08* 60567
qexp(.95,0.0016)*3
0.52648541535107e-08* 60567
qexp(.95, 0.0003188764*2)*3
48838566-48371885
30.3760468347606-30.1303460946392
0.2457007/466681
30.6217475748821-30.3760468347606
5.264853e-07*.01
5.264853e-09*60567
qexp(.5, 0.0003188764*2)*3
qexp(.95, 0.0003188764*2)*3
qexp(.99, 0.0003188764*2)*3
qexp(.9, 0.0003188764*2)*3
13/3
16/3
qexp(.9, 0.0003*2)*3
qexp(.9, 0.00032*2)*3
qexp(.9, 0.0003188764*2)*3
qexp(.5, 0.0003188764*2)*3
qexp(.95, 0.0003188764*2)*3
qexp(.99, 0.0003188764*2)*3
# Recombination rate in the EPAS1 gene#
#
5.264853e-09*60567#
#
qexp(.5, 0.0003188764*2)*3#
qexp(.9, 0.0003188764*2)*3#
qexp(.95, 0.0003188764*2)*3
18800+32100
50900/2
qexp(.99, 0.0003188764*2)*3
50316/12
48216/12
8.51+32.76+22.62+7.5+8.75+79.23+23.87+8.04+20
8.51+32.76+22.62+7.5+8.75+79.23+23.87+8.04+20+70
43.37+16+10.99
43.37+16
8.51+32.76+22.62+7.5+8.75+79.23+23.87+8.06+20+70+10.19
291.49/2
24.04+7.75+33.87+38.09+35.85+36+129.95+22.34+36.69+11.88+28.56+48+25.75
24.04+33.87+38.09+35.85+36+129.95+22.34+36.69+11.88+28.56+48+25.75
471.02/2
235.51-145.745
129.95+48
177.95/2
1000/28
1200/28
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesTwo <- c()#
TestRemain <- c()#
TestRemainTwo <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, exp(TimeMatrix[3,3]))#
    TestRemainTwo <- c(TestRemainTwo, (1-exp(TimeMatrix[3,3]))*(Matrix[3,2])/-Matrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")
plot(MatExponentiationValues)#
lines(TestRemain,col="red")
plot(MatExponentiationValuesTwo)
Matrix[3,2])/-Matrix[3,3]
Matrix[3,2]/-Matrix[3,3]
plot(MatExponentiationValuesTwo)
lines(TestRemainTwo,col="red")
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemain <- c()#
TestRemainTwo <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, exp(TimeMatrix[3,3]))#
    TestRemainTwo <- c(TestRemainTwo, (1-exp(TimeMatrix[3,3]))*(Matrix[3,2])/-Matrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")
50316/12
41.10+8.20+29.24+58.57+31.77+12.09+6.53+19.56+105+41.62+62+20+26.60+19.99
6.48+5.95
482.27-12.43
41.10+58.57+31.77+105+62
469.84/2
298.44/2
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, 1 - abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, 1 - abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
Dif <- TestRemainThree - Mini
Dif <- TestRemainThree - MiniTest
plot(Dif)
TestRemainThree[1:10]
MiniTest[1:10]
abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)
Time <- 0.004
abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)
1 - abs(Matrix[3,3]) * exp(-abs(Matrix[3,3])*Time)
?pexp
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, 1 - exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
Dif <- MatExponentiationValuesThree - MiniTest
plot(Dif)
MiniTest
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
Dif <- MatExponentiationValuesThree - MiniTest
plot(Dif)
Dif <- TestRemainThree - MiniTest
plot(Dif)
library(cubature)
?adaptIntegrate
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot(MatExponentiationValuesThreeToTwo)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, )#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot (MatExponentiationValuesThreeToTwo)
lines(TestRemainThreeToTwo, col = "red")
length(TestRemainThreeToTwo)
length(MatExponentiationValuesThreeToTwo)
Integral
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot (MatExponentiationValuesThreeToTwo)
lines(TestRemainThreeToTwo, col = "red")
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*x[1])) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,2])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
plot (MatExponentiationValuesThreeToTwo)
lines(TestRemainThreeToTwo,col="red")
plot(TestRemainThreeToTwo)
plot (MatExponentiationValuesThreeToTwo)
plot(TestRemainThreeToTwo)
plot(MatExponentiationValuesThreeToTwo)
MatrixExponentiation
sum(MatrixExponentiation)
Matrix[2,2]
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)
plot(TestRemainThreeToTwo)
(Matrix[3,2]/(abs(Matrix[3,3])))
Matrix[3,]
1/3
0.5/3
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)
plot (MatExponentiationValuesThreeToTwo)
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
Matrix
Time
i <- 1
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
Dif <- MiniTest - MatExponentiationValuesThree
plot(Dif)
Dif <- MiniTest - TestRemainThree
plot(Dif)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    IntegralTwo <- c(IntegralTwo, Integral2)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot(IntegralTwo)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot (IntegralTwo)
(1 - exp(-abs(Matrix[3,3])*1000*.004))
(Matrix[3,2]/(abs(Matrix[3,3])))
( exp(-abs(Matrix[2,2])*(Time - Time)))
( exp(-abs(Matrix[2,2])*(Time - 0)))
Time
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
Integral
Integral2
Integral3
Integral3*1/6
Integral3$integral*1/6
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
18800+32100
50900/2
500/20
550/20
160+20+50+376+136
550+742
1292/20
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)#
#
plot (MatExponentiationValuesFiveToFour)#
lines (TestRemainFiveToFour, col = "red")
plot (MatExponentiationValuesFiveToFour)#
lines (TestRemainFiveToFour, col = "red")
plot (MatExponentiationValuesFiveToFour - TestRemainFiveToFour)
plot (MatExponentiationValuesThreeToOne)
(0 < 1)
3*(0 < 1)
3*(0 < -1)
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0, 0), upperLimit = c(Time, Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    #    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    #   Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    #   Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is
Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))
Integral3$integral
MatExponentiationValuesThreeToOne$integral
MatExponentiationValuesThreeToOne[1000]
MatExponentiationValuesThreeToOne[100]
Time <- 100*.004
Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))
Integral3$integral
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
Integral3
Integral
?adaptintegrate
?adaptIntegrate
adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-4)
adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree$integral,col="red")
length(IntegralThree$integral)
IntegralThree
lines(IntegralThree,col="red")
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(x[2] - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree,col="red")
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree,col="red")
sum(IntegralThree)
sum(MatExponentiationValuesThreeToOne)
sum(IntegralThree-MatExponentiationValuesThreeToOne)
sum((IntegralThree-MatExponentiationValuesThreeToOne)/MatExponentiationValuesThreeToOne)
sum((MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne)
MatExponentiationValuesThreeToOne[1]
IntegralThree[1]
(MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne
MatExponentiationValuesThreeToOne[1]
(MatExponentiationValuesThreeToOne[1]-IntegralThree[1])/MatExponentiationValuesThreeToOne[1]
sum((MatExponentiationValuesThreeToOne[1]-IntegralThree[1])/MatExponentiationValuesThreeToOne[1])
sum((MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne)
sum((MatExponentiationValuesThreeToOne[600]-IntegralThree[600])/MatExponentiationValuesThreeToOne[600])
sum((MatExponentiationValuesThreeToOne[1:600]-IntegralThree[1:600])/MatExponentiationValuesThreeToOne[1:600])
sum((MatExponentiationValuesThreeToOne[1:400]-IntegralThree[1:400])/MatExponentiationValuesThreeToOne[1:400])
400/17
2740/6
Directory <- c("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set2/","/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set3/","/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set4/")#
#
#Title <- c(expression(paste("A) ",tau," = 3")), expression(paste("B) ",tau," = 6")), expression(paste("C) ",tau," = 9")))#
Title <- c("A)","B)","C)")#
YLab <- c(paste(expression(Theta_1)," (real value = 30)"),paste(expression(Theta_1)," (real value = 30)"),paste(expression(Theta_1)," (real value = 30)"))#
#
Ylimits <- c(14,5.5,5.5)#
AbLinePlace <- c(30,30,30)#
AbLinePlaceTau <- c(3,6,9)#
#
pdf("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure4_SupplementaryFigure4/SuppFigureS5.pdf")#
par(mfrow=c(3,2), mar=c(3,6,4,1))#
#
VectorLabels#
#
require("beanplot")#
#
Coverage50 <- c(0,0,0)#
Coverage75 <- c(0,0,0)#
Coverage90 <- c(0,0,0)#
#
Coverage50Theta1 <- c(0,0,0)#
Coverage75Theta1 <- c(0,0,0)#
Coverage90Theta1 <- c(0,0,0)#
#
Coverage50P <- c(0,0,0)#
Coverage75P <- c(0,0,0)#
Coverage90P <- c(0,0,0)#
#
Coverage50MSH <- c(0,0,0)#
Coverage75MSH <- c(0,0,0)#
Coverage90MSH <- c(0,0,0)#
#
Coverage50DH <- c(0,0,0)#
Coverage75DH <- c(0,0,0)#
Coverage90DH <- c(0,0,0)#
#
Coverage50Median <- c(0,0,0)#
Coverage75Median <- c(0,0,0)#
Coverage90Median <- c(0,0,0)#
#
RelativeBiasTau <- c(0,0,0)#
RelativeBiasMeanTau <- c(0,0,0)#
RelativeBiasMedianTau <- c(0,0,0)#
#
RelativeBiasTheta1 <- c(0,0,0)#
RelativeBiasMeanTheta1 <- c(0,0,0)#
RelativeBiasMedianTheta1 <- c(0,0,0)#
#
RelativeBiasP <- c(0,0,0)#
RelativeBiasMeanP <- c(0,0,0)#
RelativeBiasMedianP <- c(0,0,0)#
#
RelativeBiasDH <- c(0,0,0)#
RelativeBiasMeanDH <- c(0,0,0)#
RelativeBiasMedianDH <- c(0,0,0)#
#
RelativeBiasMSH <- c(0,0,0)#
RelativeBiasMeanMSH <- c(0,0,0)#
RelativeBiasMedianMSH <- c(0,0,0)#
#
MainLabels = c("A)","C)","E)")#
MainThetaLabels = c("B)","D)","F)")#
#
for (j in 1:3){#
    setwd(Directory[j])#
    P <- c()#
    MSH <- c()#
    DH <- c()#
    P_estimate <- c()#
    MSH_estimate <- c()#
    DH_estimate <- c()#
    Pmean_estimate <- c()#
    MSHmean_estimate <- c()#
    DHmean_estimate <- c()#
    Pmedian_estimate <- c()#
    MSHmedian_estimate <- c()#
    DHmedian_estimate <- c()#
    real_tau <- c()#
    real_theta0 <- c()#
    real_theta1 <- c()#
    tau_ABC <- c()#
    meantau_ABC <- c()#
    mediantau_ABC <- c()#
    theta0_ABC <- c()#
    theta1_ABC <- c()#
    meantheta1_ABC <- c()#
    mediantheta1_ABC <- c()#
    number_archives <- 1:100#
    Quantilestau <- matrix(,ncol=7,nrow=0)#
    Quantilestheta1 <- matrix(,ncol=7,nrow=0)#
    QuantilesMeantau <- matrix(,ncol=7,nrow=0)#
    QuantilesMeantheta1 <- matrix(,ncol=7,nrow=0)#
    QuantilesMediantau <- matrix(,ncol=7,nrow=0)#
    QuantilesMediantheta1 <- matrix(,ncol=7,nrow=0)#
#
    for (i in number_archives){#
        archive <- paste(i,".out",sep="")#
        dat <- read.table(archive,header=T)#
        rows <- nrow (dat)#
        print (i)#
        print (rows)#
        print (dat$Acceptancenum[10000])#
        u = 5.5 *( 10^(-5))#
        L=6#
        Theta1= dat$T1#
        N=Theta1/(2*L*u)#
        tMS=dat$Time#
        timeMS = tMS*2*N#
        timeAR = (2*L*u)*timeMS#
        d <- density(timeAR)#
        Quantilestau <- rbind(Quantilestau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMeantau <- rbind(QuantilesMeantau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMediantau <- rbind(QuantilesMediantau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        tau_ABC[i] <- d$x[d$y==max(d$y)]#
        meantau_ABC <- c(meantau_ABC, mean(timeAR))#
        real_tau[i] <- 3#
        d <- density(dat$T1)#
        theta1_ABC[i] <- d$x[d$y==max(d$y)]#
        meantheta1_ABC <- c(meantheta1_ABC,mean(dat$T1))#
        Quantilestheta1 <- rbind(Quantilestheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMeantheta1 <- rbind(QuantilesMeantheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMediantheta1 <- rbind(QuantilesMediantheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        d <- density(dat$SASHloc)#
        MSH_estimate[i] <- d$x[d$y==max(d$y)]#
        MSHmean_estimate[i] <- mean(dat$SASHloc)#
        MSHmedian_estimate[i] <- median(dat$SASHloc)#
        d <- density(dat$SASH)#
        P_estimate[i] <- d$x[d$y==max(d$y)]#
        Pmean_estimate[i] <- mean(dat$SASH)#
        Pmedian_estimate[i] <- median(dat$SASH)#
        d <- density(dat$SHdist)#
        DH_estimate[i] <- d$x[d$y==max(d$y)]#
        DHmean_estimate[i] <- mean(dat$SHdist)#
        DHmedian_estimate[i] <- median(dat$SHdist)#
        real_theta1[i] <- 30#
        real_theta0[i] <- 0.03#
        homoplasy_archive <- paste(i,"homoplasy.txt",sep="")#
        homoplasy <- read.table(homoplasy_archive,header=T)#
        MSH[i] <- homoplasy$Sizehomoplasyloc#
        P[i] <- homoplasy$SASH#
        DH[i] <- homoplasy$SHdist#
        QuantilesMSH <-quantile(dat$SASHloc,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
        QuantilesDH <-quantile(dat$SHdist,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
        QuantilesP <-quantile(dat$SASH,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
    }#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,3]) && (AbLinePlaceTau[j] < Quantilestau[i,5])){#
            Coverage50[j] <- Coverage50[j] + 1#
        }#
    }#
#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,2]) && (AbLinePlaceTau[j] < Quantilestau[i,6])){#
            Coverage75[j] <- Coverage75[j] + 1#
        }#
    }#
#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,1]) && (AbLinePlaceTau[j] < Quantilestau[i,7])){#
            Coverage90[j] <- Coverage90[j] + 1#
        }#
    }#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,3]) && (30 < Quantilestheta1[i,5])){#
        Coverage50Theta1[j] <- Coverage50Theta1[j] + 1#
    }#
}#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,2]) && (30 < Quantilestheta1[i,6])){#
        Coverage75Theta1[j] <- Coverage75Theta1[j] + 1#
    }#
}#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,1]) && (30 < Quantilestheta1[i,7])){#
        Coverage90Theta1[j] <- Coverage90Theta1[j] + 1#
    }#
}#
    RelativeBiasTau[j] <- mean((tau_ABC-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
    RelativeBiasMeanTau[j] <- mean((meantau_ABC-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
    RelativeBiasMedianTau[j] <- mean((Quantilestau[,3]-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
#
    RelativeBiasTheta1[j] <- mean((tau_ABC-30)/30)#
    RelativeBiasMeanTheta1[j] <- mean((meantau_ABC-30)/30)#
    RelativeBiasMedianTheta1[j] <- mean((Quantilestau[,3]-30)/30)#
    RelativeBiasP[j] <- mean((P_estimate-P)/P)#
    RelativeBiasMeanP[j] <- mean((Pmean_estimate-P)/P)#
    RelativeBiasMedianP[j] <- mean((Pmedian_estimate-P)/P)#
    RelativeBiasMSH[j] <- mean((MSH_estimate-MSH)/MSH)#
    RelativeBiasMeanMSH[j] <- mean((MSHmean_estimate-MSH)/MSH)#
    RelativeBiasMedianMSH[j] <- mean((MSHmedian_estimate-MSH)/MSH)#
    RelativeBiasDH[j] <- mean((DH_estimate-DH)/DH)#
    RelativeBiasMeanDH[j] <- mean((DHmean_estimate-DH)/DH)#
    RelativeBiasMedianDH[j] <- mean((DHmedian_estimate-DH)/DH)#
#
    Navascues_data <- read.table("tauNavascues.txt")#
    tau_Navascues <- Navascues_data[,3]#
    Theta0_Navascues <- Navascues_data[,1]#
    Theta1_Navascues <- Navascues_data[,2]#
    Arlequin_data <- read.table("resultadosarlequin.txt",header=T)#
    tau_Arlequin <- Arlequin_data$tau#
    Theta0_Arlequin <- Arlequin_data$theta0#
    Theta1_Arlequin <- Arlequin_data$theta1#
    # beanplot(tau_Arlequin,tau_Navascues,tau_ABC,names=c("LSWH","MPH","ABC"),ylab=YLab[j],main=Title[j],col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0, cex.lab = 2, cex.main = 2, cex.axis = 2,overallline=AbLinePlace[j])#
    SlightlyUp <- max (c(Quantilestau[,3],meantau_ABC,tau_ABC)) + 0.2 * max (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
    SlightlyTextUp <- max (c(Quantilestau[,3],meantau_ABC,tau_ABC)) + 0.0 * max (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
    SlightlyDown <- min (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
#
    boxplot(Quantilestau[,3],meantau_ABC,tau_ABC, cex.lab = 3, cex.main = 3, cex.axis = 2,ylab=expression(tau), ylim = c(SlightlyDown,SlightlyTextUp), main = MainLabels[j])#
    abline(h=AbLinePlaceTau[j],lty="dashed")#
    mtext("Median", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    mtext("Mean", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    mtext("Mode", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    text(1,SlightlyTextUp,round(RelativeBiasMedianTau[j],3),cex=1.5)#
    #    text(2,SlightlyTextUp,round(RelativeBiasMeanTau[j],3),cex=1.5)#
    #    text(3,SlightlyTextUp,round(RelativeBiasTau[j],3),cex=1.5)#
#
    SlightlyUp <- max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC)) + 0.2 * max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
    SlightlyTextUp <- max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC)) + 0.05 * max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
    SlightlyDown <- min (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
#
    boxplot(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC, cex.lab = 3, cex.main = 3, cex.axis = 2,ylab=expression(theta[1]), ylim = c(SlightlyDown,SlightlyTextUp), main = MainThetaLabels[j])#
    abline(h=AbLinePlace[j],lty="dashed")#
    mtext("Median", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    mtext("Mean", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    mtext("Mode", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    text(1,SlightlyTextUp,round(RelativeBiasMedianTheta1[j],3),cex=1.5)#
    #    text(2,SlightlyTextUp,round(RelativeBiasMeanTheta1[j],3),cex=1.5)#
    #    text(3,SlightlyTextUp,round(RelativeBiasTheta1[j],3),cex=1.5)#
#
# boxplot(log10(Theta1_Arlequin),log10(Theta1_Navascues),log10(theta1_ABC),ylab=expression(theta[1]),main=Title[j], cex.lab = 3, cex.main = 3, cex.axis = 2, ylim=c(0,Ylimits[j]),yaxt="n")#
    if (j> 1){#
        #axis(2,at=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14),labels=c(expression(10^1),expression(10^2),expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7),expression(10^8),expression(10^9),expression(10^10),expression(10^11),expression(10^12),expression(10^13),expression(10^14)),cex.lab=2, cex.axis=2, cex = 2)#
    }else{#
        # axis(2,at=c(1,5,9,13),labels=c(expression(10^1),expression(10^5),expression(10^9),expression(10^13)),cex.lab=2, cex.axis=2, cex = 2)#
    }#
    #mtext("Tau (real value = 3)", WEST <- 2, at = 3, line = 2, cex = 2)#
    #    mtext("LSWH", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    #    mtext("MPH", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    #    mtext("ABC", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    abline(a=log10(AbLinePlace[j]),b=0,lty=2)#
}#
dev.off()#
#
Table <- cbind(RelativeBiasTau,RelativeBiasMeanTau,RelativeBiasMedianTau,RelativeBiasTheta1,RelativeBiasMeanTheta1,RelativeBiasMedianTheta1,RelativeBiasP,RelativeBiasMeanP,RelativeBiasMedianP,RelativeBiasMSH,RelativeBiasMeanMSH,RelativeBiasMedianMSH,RelativeBiasDH,RelativeBiasMeanDH,RelativeBiasMedianDH,Coverage50,Coverage75,Coverage90,Coverage50Theta1,Coverage75Theta1,Coverage90Theta1)#
#
write.table(Table,file="/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure4_SupplementaryFigure4/RelativeBiasMeanMedianModeHomoplasy.txt",sep="\t")
Directory <- c("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set2/","/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set3/","/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set4/")#
#
#Title <- c(expression(paste("A) ",tau," = 3")), expression(paste("B) ",tau," = 6")), expression(paste("C) ",tau," = 9")))#
Title <- c("A)","B)","C)")#
YLab <- c(paste(expression(Theta_1)," (real value = 30)"),paste(expression(Theta_1)," (real value = 30)"),paste(expression(Theta_1)," (real value = 30)"))#
#
Ylimits <- c(14,5.5,5.5)#
AbLinePlace <- c(30,30,30)#
AbLinePlaceTau <- c(3,6,9)#
#
pdf("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure4_SupplementaryFigure4/SuppFigureS5.pdf")#
par(mfrow=c(3,2), mar=c(3,6,4,1))#
#
VectorLabels#
#
require("beanplot")#
#
Coverage50 <- c(0,0,0)#
Coverage75 <- c(0,0,0)#
Coverage90 <- c(0,0,0)#
#
Coverage50Theta1 <- c(0,0,0)#
Coverage75Theta1 <- c(0,0,0)#
Coverage90Theta1 <- c(0,0,0)#
#
Coverage50P <- c(0,0,0)#
Coverage75P <- c(0,0,0)#
Coverage90P <- c(0,0,0)#
#
Coverage50MSH <- c(0,0,0)#
Coverage75MSH <- c(0,0,0)#
Coverage90MSH <- c(0,0,0)#
#
Coverage50DH <- c(0,0,0)#
Coverage75DH <- c(0,0,0)#
Coverage90DH <- c(0,0,0)#
#
Coverage50Median <- c(0,0,0)#
Coverage75Median <- c(0,0,0)#
Coverage90Median <- c(0,0,0)#
#
RelativeBiasTau <- c(0,0,0)#
RelativeBiasMeanTau <- c(0,0,0)#
RelativeBiasMedianTau <- c(0,0,0)#
#
RelativeBiasTheta1 <- c(0,0,0)#
RelativeBiasMeanTheta1 <- c(0,0,0)#
RelativeBiasMedianTheta1 <- c(0,0,0)#
#
RelativeBiasP <- c(0,0,0)#
RelativeBiasMeanP <- c(0,0,0)#
RelativeBiasMedianP <- c(0,0,0)#
#
RelativeBiasDH <- c(0,0,0)#
RelativeBiasMeanDH <- c(0,0,0)#
RelativeBiasMedianDH <- c(0,0,0)#
#
RelativeBiasMSH <- c(0,0,0)#
RelativeBiasMeanMSH <- c(0,0,0)#
RelativeBiasMedianMSH <- c(0,0,0)#
#
MainLabels = c("A)","C)","E)")#
MainThetaLabels = c("B)","D)","F)")#
#
for (j in 1:3){#
    setwd(Directory[j])#
    P <- c()#
    MSH <- c()#
    DH <- c()#
    P_estimate <- c()#
    MSH_estimate <- c()#
    DH_estimate <- c()#
    Pmean_estimate <- c()#
    MSHmean_estimate <- c()#
    DHmean_estimate <- c()#
    Pmedian_estimate <- c()#
    MSHmedian_estimate <- c()#
    DHmedian_estimate <- c()#
    real_tau <- c()#
    real_theta0 <- c()#
    real_theta1 <- c()#
    tau_ABC <- c()#
    meantau_ABC <- c()#
    mediantau_ABC <- c()#
    theta0_ABC <- c()#
    theta1_ABC <- c()#
    meantheta1_ABC <- c()#
    mediantheta1_ABC <- c()#
    number_archives <- 1:100#
    Quantilestau <- matrix(,ncol=7,nrow=0)#
    Quantilestheta1 <- matrix(,ncol=7,nrow=0)#
    QuantilesMeantau <- matrix(,ncol=7,nrow=0)#
    QuantilesMeantheta1 <- matrix(,ncol=7,nrow=0)#
    QuantilesMediantau <- matrix(,ncol=7,nrow=0)#
    QuantilesMediantheta1 <- matrix(,ncol=7,nrow=0)#
#
    for (i in number_archives){#
        archive <- paste(i,".out",sep="")#
        dat <- read.table(archive,header=T)#
        rows <- nrow (dat)#
        print (i)#
        print (rows)#
        print (dat$Acceptancenum[10000])#
        u = 5.5 *( 10^(-5))#
        L=6#
        Theta1= dat$T1#
        N=Theta1/(2*L*u)#
        tMS=dat$Time#
        timeMS = tMS*2*N#
        timeAR = (2*L*u)*timeMS#
        d <- density(timeAR)#
        Quantilestau <- rbind(Quantilestau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMeantau <- rbind(QuantilesMeantau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMediantau <- rbind(QuantilesMediantau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        tau_ABC[i] <- d$x[d$y==max(d$y)]#
        meantau_ABC <- c(meantau_ABC, mean(timeAR))#
        real_tau[i] <- 3#
        d <- density(dat$T1)#
        theta1_ABC[i] <- d$x[d$y==max(d$y)]#
        meantheta1_ABC <- c(meantheta1_ABC,mean(dat$T1))#
        Quantilestheta1 <- rbind(Quantilestheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMeantheta1 <- rbind(QuantilesMeantheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMediantheta1 <- rbind(QuantilesMediantheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        d <- density(dat$SASHloc)#
        MSH_estimate[i] <- d$x[d$y==max(d$y)]#
        MSHmean_estimate[i] <- mean(dat$SASHloc)#
        MSHmedian_estimate[i] <- median(dat$SASHloc)#
        d <- density(dat$SASH)#
        P_estimate[i] <- d$x[d$y==max(d$y)]#
        Pmean_estimate[i] <- mean(dat$SASH)#
        Pmedian_estimate[i] <- median(dat$SASH)#
        d <- density(dat$SHdist)#
        DH_estimate[i] <- d$x[d$y==max(d$y)]#
        DHmean_estimate[i] <- mean(dat$SHdist)#
        DHmedian_estimate[i] <- median(dat$SHdist)#
        real_theta1[i] <- 30#
        real_theta0[i] <- 0.03#
        homoplasy_archive <- paste(i,"homoplasy.txt",sep="")#
        homoplasy <- read.table(homoplasy_archive,header=T)#
        MSH[i] <- homoplasy$Sizehomoplasyloc#
        P[i] <- homoplasy$SASH#
        DH[i] <- homoplasy$SHdist#
        QuantilesMSH <-quantile(dat$SASHloc,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
        QuantilesDH <-quantile(dat$SHdist,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
        QuantilesP <-quantile(dat$SASH,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
        if ((P[i] >QuantilesP[i,3]) && (P[i] < QuantilesP[i,5])){#
        Coverage50P[j] <- Coverage50P[j] + 1#
        }#
        if ((P[i] >QuantilesP[i,2]) && (P[i] < QuantilesP[i,6])){#
            Coverage75P[j] <- Coverage75P[j] + 1#
        }#
        if ((P[i] >QuantilesP[i,1]) && (P[i] < QuantilesP[i,7])){#
            Coverage90P[j] <- Coverage90P[j] + 1#
        }#
        if ((MSH[i] >QuantilesMSH[i,3]) && (MSH[i] < QuantilesMSH[i,5])){#
            Coverage50MSH[j] <- Coverage50MSH[j] + 1#
        }#
        if ((MSH[i] >QuantilesMSH[i,2]) && (MSH[i] < QuantilesMSH[i,6])){#
            Coverage75MSH[j] <- Coverage75MSH[j] + 1#
        }#
        if ((MSH[i] >QuantilesMSH[i,1]) && (MSH[i] < QuantilesMSH[i,7])){#
            Coverage90MSH[j] <- Coverage90MSH[j] + 1#
        }#
        if ((DH[i] >QuantilesDH[i,3]) && (DH[i] < QuantilesDH[i,5])){#
            Coverage50DH[j] <- Coverage50DH[j] + 1#
        }#
        if ((DH[i] >QuantilesDH[i,2]) && (DH[i] < QuantilesDH[i,6])){#
            Coverage75DH[j] <- Coverage75DH[j] + 1#
        }#
        if ((DH[i] >QuantilesDH[i,1]) && (DH[i] < QuantilesDH[i,7])){#
            Coverage90DH[j] <- Coverage90DH[j] + 1#
        }#
    }#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,3]) && (AbLinePlaceTau[j] < Quantilestau[i,5])){#
            Coverage50[j] <- Coverage50[j] + 1#
        }#
    }#
#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,2]) && (AbLinePlaceTau[j] < Quantilestau[i,6])){#
            Coverage75[j] <- Coverage75[j] + 1#
        }#
    }#
#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,1]) && (AbLinePlaceTau[j] < Quantilestau[i,7])){#
            Coverage90[j] <- Coverage90[j] + 1#
        }#
    }#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,3]) && (30 < Quantilestheta1[i,5])){#
        Coverage50Theta1[j] <- Coverage50Theta1[j] + 1#
    }#
}#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,2]) && (30 < Quantilestheta1[i,6])){#
        Coverage75Theta1[j] <- Coverage75Theta1[j] + 1#
    }#
}#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,1]) && (30 < Quantilestheta1[i,7])){#
        Coverage90Theta1[j] <- Coverage90Theta1[j] + 1#
    }#
}#
    RelativeBiasTau[j] <- mean((tau_ABC-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
    RelativeBiasMeanTau[j] <- mean((meantau_ABC-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
    RelativeBiasMedianTau[j] <- mean((Quantilestau[,3]-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
#
    RelativeBiasTheta1[j] <- mean((tau_ABC-30)/30)#
    RelativeBiasMeanTheta1[j] <- mean((meantau_ABC-30)/30)#
    RelativeBiasMedianTheta1[j] <- mean((Quantilestau[,3]-30)/30)#
    RelativeBiasP[j] <- mean((P_estimate-P)/P)#
    RelativeBiasMeanP[j] <- mean((Pmean_estimate-P)/P)#
    RelativeBiasMedianP[j] <- mean((Pmedian_estimate-P)/P)#
    RelativeBiasMSH[j] <- mean((MSH_estimate-MSH)/MSH)#
    RelativeBiasMeanMSH[j] <- mean((MSHmean_estimate-MSH)/MSH)#
    RelativeBiasMedianMSH[j] <- mean((MSHmedian_estimate-MSH)/MSH)#
    RelativeBiasDH[j] <- mean((DH_estimate-DH)/DH)#
    RelativeBiasMeanDH[j] <- mean((DHmean_estimate-DH)/DH)#
    RelativeBiasMedianDH[j] <- mean((DHmedian_estimate-DH)/DH)#
#
    Navascues_data <- read.table("tauNavascues.txt")#
    tau_Navascues <- Navascues_data[,3]#
    Theta0_Navascues <- Navascues_data[,1]#
    Theta1_Navascues <- Navascues_data[,2]#
    Arlequin_data <- read.table("resultadosarlequin.txt",header=T)#
    tau_Arlequin <- Arlequin_data$tau#
    Theta0_Arlequin <- Arlequin_data$theta0#
    Theta1_Arlequin <- Arlequin_data$theta1#
    # beanplot(tau_Arlequin,tau_Navascues,tau_ABC,names=c("LSWH","MPH","ABC"),ylab=YLab[j],main=Title[j],col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0, cex.lab = 2, cex.main = 2, cex.axis = 2,overallline=AbLinePlace[j])#
    SlightlyUp <- max (c(Quantilestau[,3],meantau_ABC,tau_ABC)) + 0.2 * max (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
    SlightlyTextUp <- max (c(Quantilestau[,3],meantau_ABC,tau_ABC)) + 0.0 * max (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
    SlightlyDown <- min (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
#
    boxplot(Quantilestau[,3],meantau_ABC,tau_ABC, cex.lab = 3, cex.main = 3, cex.axis = 2,ylab=expression(tau), ylim = c(SlightlyDown,SlightlyTextUp), main = MainLabels[j])#
    abline(h=AbLinePlaceTau[j],lty="dashed")#
    mtext("Median", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    mtext("Mean", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    mtext("Mode", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    text(1,SlightlyTextUp,round(RelativeBiasMedianTau[j],3),cex=1.5)#
    #    text(2,SlightlyTextUp,round(RelativeBiasMeanTau[j],3),cex=1.5)#
    #    text(3,SlightlyTextUp,round(RelativeBiasTau[j],3),cex=1.5)#
#
    SlightlyUp <- max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC)) + 0.2 * max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
    SlightlyTextUp <- max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC)) + 0.05 * max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
    SlightlyDown <- min (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
#
    boxplot(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC, cex.lab = 3, cex.main = 3, cex.axis = 2,ylab=expression(theta[1]), ylim = c(SlightlyDown,SlightlyTextUp), main = MainThetaLabels[j])#
    abline(h=AbLinePlace[j],lty="dashed")#
    mtext("Median", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    mtext("Mean", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    mtext("Mode", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    text(1,SlightlyTextUp,round(RelativeBiasMedianTheta1[j],3),cex=1.5)#
    #    text(2,SlightlyTextUp,round(RelativeBiasMeanTheta1[j],3),cex=1.5)#
    #    text(3,SlightlyTextUp,round(RelativeBiasTheta1[j],3),cex=1.5)#
#
# boxplot(log10(Theta1_Arlequin),log10(Theta1_Navascues),log10(theta1_ABC),ylab=expression(theta[1]),main=Title[j], cex.lab = 3, cex.main = 3, cex.axis = 2, ylim=c(0,Ylimits[j]),yaxt="n")#
    if (j> 1){#
        #axis(2,at=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14),labels=c(expression(10^1),expression(10^2),expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7),expression(10^8),expression(10^9),expression(10^10),expression(10^11),expression(10^12),expression(10^13),expression(10^14)),cex.lab=2, cex.axis=2, cex = 2)#
    }else{#
        # axis(2,at=c(1,5,9,13),labels=c(expression(10^1),expression(10^5),expression(10^9),expression(10^13)),cex.lab=2, cex.axis=2, cex = 2)#
    }#
    #mtext("Tau (real value = 3)", WEST <- 2, at = 3, line = 2, cex = 2)#
    #    mtext("LSWH", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    #    mtext("MPH", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    #    mtext("ABC", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    abline(a=log10(AbLinePlace[j]),b=0,lty=2)#
}#
dev.off()#
#
Table <- cbind(RelativeBiasTau,RelativeBiasMeanTau,RelativeBiasMedianTau,RelativeBiasTheta1,RelativeBiasMeanTheta1,RelativeBiasMedianTheta1,RelativeBiasP,RelativeBiasMeanP,RelativeBiasMedianP,RelativeBiasMSH,RelativeBiasMeanMSH,RelativeBiasMedianMSH,RelativeBiasDH,RelativeBiasMeanDH,RelativeBiasMedianDH,Coverage50,Coverage75,Coverage90,Coverage50Theta1,Coverage75Theta1,Coverage90Theta1)#
#
write.table(Table,file="/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure4_SupplementaryFigure4/RelativeBiasMeanMedianModeHomoplasy.txt",sep="\t")
Directory <- c("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set2/","/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set3/","/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set4/")#
#
#Title <- c(expression(paste("A) ",tau," = 3")), expression(paste("B) ",tau," = 6")), expression(paste("C) ",tau," = 9")))#
Title <- c("A)","B)","C)")#
YLab <- c(paste(expression(Theta_1)," (real value = 30)"),paste(expression(Theta_1)," (real value = 30)"),paste(expression(Theta_1)," (real value = 30)"))#
#
Ylimits <- c(14,5.5,5.5)#
AbLinePlace <- c(30,30,30)#
AbLinePlaceTau <- c(3,6,9)#
#
pdf("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure4_SupplementaryFigure4/SuppFigureS5.pdf")#
par(mfrow=c(3,2), mar=c(3,6,4,1))#
#
VectorLabels#
#
require("beanplot")#
#
Coverage50 <- c(0,0,0)#
Coverage75 <- c(0,0,0)#
Coverage90 <- c(0,0,0)#
#
Coverage50Theta1 <- c(0,0,0)#
Coverage75Theta1 <- c(0,0,0)#
Coverage90Theta1 <- c(0,0,0)#
#
Coverage50P <- c(0,0,0)#
Coverage75P <- c(0,0,0)#
Coverage90P <- c(0,0,0)#
#
Coverage50MSH <- c(0,0,0)#
Coverage75MSH <- c(0,0,0)#
Coverage90MSH <- c(0,0,0)#
#
Coverage50DH <- c(0,0,0)#
Coverage75DH <- c(0,0,0)#
Coverage90DH <- c(0,0,0)#
#
Coverage50Median <- c(0,0,0)#
Coverage75Median <- c(0,0,0)#
Coverage90Median <- c(0,0,0)#
#
RelativeBiasTau <- c(0,0,0)#
RelativeBiasMeanTau <- c(0,0,0)#
RelativeBiasMedianTau <- c(0,0,0)#
#
RelativeBiasTheta1 <- c(0,0,0)#
RelativeBiasMeanTheta1 <- c(0,0,0)#
RelativeBiasMedianTheta1 <- c(0,0,0)#
#
RelativeBiasP <- c(0,0,0)#
RelativeBiasMeanP <- c(0,0,0)#
RelativeBiasMedianP <- c(0,0,0)#
#
RelativeBiasDH <- c(0,0,0)#
RelativeBiasMeanDH <- c(0,0,0)#
RelativeBiasMedianDH <- c(0,0,0)#
#
RelativeBiasMSH <- c(0,0,0)#
RelativeBiasMeanMSH <- c(0,0,0)#
RelativeBiasMedianMSH <- c(0,0,0)#
#
MainLabels = c("A)","C)","E)")#
MainThetaLabels = c("B)","D)","F)")#
#
for (j in 1:3){#
    setwd(Directory[j])#
    P <- c()#
    MSH <- c()#
    DH <- c()#
    P_estimate <- c()#
    MSH_estimate <- c()#
    DH_estimate <- c()#
    Pmean_estimate <- c()#
    MSHmean_estimate <- c()#
    DHmean_estimate <- c()#
    Pmedian_estimate <- c()#
    MSHmedian_estimate <- c()#
    DHmedian_estimate <- c()#
    real_tau <- c()#
    real_theta0 <- c()#
    real_theta1 <- c()#
    tau_ABC <- c()#
    meantau_ABC <- c()#
    mediantau_ABC <- c()#
    theta0_ABC <- c()#
    theta1_ABC <- c()#
    meantheta1_ABC <- c()#
    mediantheta1_ABC <- c()#
    number_archives <- 1:100#
    Quantilestau <- matrix(,ncol=7,nrow=0)#
    Quantilestheta1 <- matrix(,ncol=7,nrow=0)#
    QuantilesMeantau <- matrix(,ncol=7,nrow=0)#
    QuantilesMeantheta1 <- matrix(,ncol=7,nrow=0)#
    QuantilesMediantau <- matrix(,ncol=7,nrow=0)#
    QuantilesMediantheta1 <- matrix(,ncol=7,nrow=0)#
#
    for (i in number_archives){#
        archive <- paste(i,".out",sep="")#
        dat <- read.table(archive,header=T)#
        rows <- nrow (dat)#
        print (i)#
        print (rows)#
        print (dat$Acceptancenum[10000])#
        u = 5.5 *( 10^(-5))#
        L=6#
        Theta1= dat$T1#
        N=Theta1/(2*L*u)#
        tMS=dat$Time#
        timeMS = tMS*2*N#
        timeAR = (2*L*u)*timeMS#
        d <- density(timeAR)#
        Quantilestau <- rbind(Quantilestau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMeantau <- rbind(QuantilesMeantau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMediantau <- rbind(QuantilesMediantau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        tau_ABC[i] <- d$x[d$y==max(d$y)]#
        meantau_ABC <- c(meantau_ABC, mean(timeAR))#
        real_tau[i] <- 3#
        d <- density(dat$T1)#
        theta1_ABC[i] <- d$x[d$y==max(d$y)]#
        meantheta1_ABC <- c(meantheta1_ABC,mean(dat$T1))#
        Quantilestheta1 <- rbind(Quantilestheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMeantheta1 <- rbind(QuantilesMeantheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMediantheta1 <- rbind(QuantilesMediantheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        d <- density(dat$SASHloc)#
        MSH_estimate[i] <- d$x[d$y==max(d$y)]#
        MSHmean_estimate[i] <- mean(dat$SASHloc)#
        MSHmedian_estimate[i] <- median(dat$SASHloc)#
        d <- density(dat$SASH)#
        P_estimate[i] <- d$x[d$y==max(d$y)]#
        Pmean_estimate[i] <- mean(dat$SASH)#
        Pmedian_estimate[i] <- median(dat$SASH)#
        d <- density(dat$SHdist)#
        DH_estimate[i] <- d$x[d$y==max(d$y)]#
        DHmean_estimate[i] <- mean(dat$SHdist)#
        DHmedian_estimate[i] <- median(dat$SHdist)#
        real_theta1[i] <- 30#
        real_theta0[i] <- 0.03#
        homoplasy_archive <- paste(i,"homoplasy.txt",sep="")#
        homoplasy <- read.table(homoplasy_archive,header=T)#
        MSH[i] <- homoplasy$Sizehomoplasyloc#
        P[i] <- homoplasy$SASH#
        DH[i] <- homoplasy$SHdist#
        QuantilesMSH <-quantile(dat$SASHloc,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
        QuantilesDH <-quantile(dat$SHdist,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
        QuantilesP <-quantile(dat$SASH,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
        if ((P[i] >QuantilesP[3]) && (P[i] < QuantilesP[5])){#
        Coverage50P[j] <- Coverage50P[j] + 1#
        }#
        if ((P[i] >QuantilesP[2]) && (P[i] < QuantilesP[6])){#
            Coverage75P[j] <- Coverage75P[j] + 1#
        }#
        if ((P[i] >QuantilesP[1]) && (P[i] < QuantilesP[7])){#
            Coverage90P[j] <- Coverage90P[j] + 1#
        }#
        if ((MSH[i] >QuantilesMSH[3]) && (MSH[i] < QuantilesMSH[5])){#
            Coverage50MSH[j] <- Coverage50MSH[j] + 1#
        }#
        if ((MSH[i] >QuantilesMSH[2]) && (MSH[i] < QuantilesMSH[6])){#
            Coverage75MSH[j] <- Coverage75MSH[j] + 1#
        }#
        if ((MSH[i] >QuantilesMSH[1]) && (MSH[i] < QuantilesMSH[7])){#
            Coverage90MSH[j] <- Coverage90MSH[j] + 1#
        }#
        if ((DH[i] >QuantilesDH[3]) && (DH[i] < QuantilesDH[5])){#
            Coverage50DH[j] <- Coverage50DH[j] + 1#
        }#
        if ((DH[i] >QuantilesDH[2]) && (DH[i] < QuantilesDH[6])){#
            Coverage75DH[j] <- Coverage75DH[j] + 1#
        }#
        if ((DH[i] >QuantilesDH[1]) && (DH[i] < QuantilesDH[7])){#
            Coverage90DH[j] <- Coverage90DH[j] + 1#
        }#
    }#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,3]) && (AbLinePlaceTau[j] < Quantilestau[i,5])){#
            Coverage50[j] <- Coverage50[j] + 1#
        }#
    }#
#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,2]) && (AbLinePlaceTau[j] < Quantilestau[i,6])){#
            Coverage75[j] <- Coverage75[j] + 1#
        }#
    }#
#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,1]) && (AbLinePlaceTau[j] < Quantilestau[i,7])){#
            Coverage90[j] <- Coverage90[j] + 1#
        }#
    }#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,3]) && (30 < Quantilestheta1[i,5])){#
        Coverage50Theta1[j] <- Coverage50Theta1[j] + 1#
    }#
}#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,2]) && (30 < Quantilestheta1[i,6])){#
        Coverage75Theta1[j] <- Coverage75Theta1[j] + 1#
    }#
}#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,1]) && (30 < Quantilestheta1[i,7])){#
        Coverage90Theta1[j] <- Coverage90Theta1[j] + 1#
    }#
}#
    RelativeBiasTau[j] <- mean((tau_ABC-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
    RelativeBiasMeanTau[j] <- mean((meantau_ABC-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
    RelativeBiasMedianTau[j] <- mean((Quantilestau[,3]-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
#
    RelativeBiasTheta1[j] <- mean((tau_ABC-30)/30)#
    RelativeBiasMeanTheta1[j] <- mean((meantau_ABC-30)/30)#
    RelativeBiasMedianTheta1[j] <- mean((Quantilestau[,3]-30)/30)#
    RelativeBiasP[j] <- mean((P_estimate-P)/P)#
    RelativeBiasMeanP[j] <- mean((Pmean_estimate-P)/P)#
    RelativeBiasMedianP[j] <- mean((Pmedian_estimate-P)/P)#
    RelativeBiasMSH[j] <- mean((MSH_estimate-MSH)/MSH)#
    RelativeBiasMeanMSH[j] <- mean((MSHmean_estimate-MSH)/MSH)#
    RelativeBiasMedianMSH[j] <- mean((MSHmedian_estimate-MSH)/MSH)#
    RelativeBiasDH[j] <- mean((DH_estimate-DH)/DH)#
    RelativeBiasMeanDH[j] <- mean((DHmean_estimate-DH)/DH)#
    RelativeBiasMedianDH[j] <- mean((DHmedian_estimate-DH)/DH)#
#
    Navascues_data <- read.table("tauNavascues.txt")#
    tau_Navascues <- Navascues_data[,3]#
    Theta0_Navascues <- Navascues_data[,1]#
    Theta1_Navascues <- Navascues_data[,2]#
    Arlequin_data <- read.table("resultadosarlequin.txt",header=T)#
    tau_Arlequin <- Arlequin_data$tau#
    Theta0_Arlequin <- Arlequin_data$theta0#
    Theta1_Arlequin <- Arlequin_data$theta1#
    # beanplot(tau_Arlequin,tau_Navascues,tau_ABC,names=c("LSWH","MPH","ABC"),ylab=YLab[j],main=Title[j],col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0, cex.lab = 2, cex.main = 2, cex.axis = 2,overallline=AbLinePlace[j])#
    SlightlyUp <- max (c(Quantilestau[,3],meantau_ABC,tau_ABC)) + 0.2 * max (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
    SlightlyTextUp <- max (c(Quantilestau[,3],meantau_ABC,tau_ABC)) + 0.0 * max (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
    SlightlyDown <- min (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
#
    boxplot(Quantilestau[,3],meantau_ABC,tau_ABC, cex.lab = 3, cex.main = 3, cex.axis = 2,ylab=expression(tau), ylim = c(SlightlyDown,SlightlyTextUp), main = MainLabels[j])#
    abline(h=AbLinePlaceTau[j],lty="dashed")#
    mtext("Median", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    mtext("Mean", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    mtext("Mode", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    text(1,SlightlyTextUp,round(RelativeBiasMedianTau[j],3),cex=1.5)#
    #    text(2,SlightlyTextUp,round(RelativeBiasMeanTau[j],3),cex=1.5)#
    #    text(3,SlightlyTextUp,round(RelativeBiasTau[j],3),cex=1.5)#
#
    SlightlyUp <- max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC)) + 0.2 * max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
    SlightlyTextUp <- max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC)) + 0.05 * max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
    SlightlyDown <- min (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
#
    boxplot(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC, cex.lab = 3, cex.main = 3, cex.axis = 2,ylab=expression(theta[1]), ylim = c(SlightlyDown,SlightlyTextUp), main = MainThetaLabels[j])#
    abline(h=AbLinePlace[j],lty="dashed")#
    mtext("Median", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    mtext("Mean", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    mtext("Mode", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    text(1,SlightlyTextUp,round(RelativeBiasMedianTheta1[j],3),cex=1.5)#
    #    text(2,SlightlyTextUp,round(RelativeBiasMeanTheta1[j],3),cex=1.5)#
    #    text(3,SlightlyTextUp,round(RelativeBiasTheta1[j],3),cex=1.5)#
#
# boxplot(log10(Theta1_Arlequin),log10(Theta1_Navascues),log10(theta1_ABC),ylab=expression(theta[1]),main=Title[j], cex.lab = 3, cex.main = 3, cex.axis = 2, ylim=c(0,Ylimits[j]),yaxt="n")#
    if (j> 1){#
        #axis(2,at=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14),labels=c(expression(10^1),expression(10^2),expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7),expression(10^8),expression(10^9),expression(10^10),expression(10^11),expression(10^12),expression(10^13),expression(10^14)),cex.lab=2, cex.axis=2, cex = 2)#
    }else{#
        # axis(2,at=c(1,5,9,13),labels=c(expression(10^1),expression(10^5),expression(10^9),expression(10^13)),cex.lab=2, cex.axis=2, cex = 2)#
    }#
    #mtext("Tau (real value = 3)", WEST <- 2, at = 3, line = 2, cex = 2)#
    #    mtext("LSWH", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    #    mtext("MPH", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    #    mtext("ABC", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    abline(a=log10(AbLinePlace[j]),b=0,lty=2)#
}#
dev.off()#
#
Table <- cbind(RelativeBiasTau,RelativeBiasMeanTau,RelativeBiasMedianTau,RelativeBiasTheta1,RelativeBiasMeanTheta1,RelativeBiasMedianTheta1,RelativeBiasP,RelativeBiasMeanP,RelativeBiasMedianP,RelativeBiasMSH,RelativeBiasMeanMSH,RelativeBiasMedianMSH,RelativeBiasDH,RelativeBiasMeanDH,RelativeBiasMedianDH,Coverage50,Coverage75,Coverage90,Coverage50Theta1,Coverage75Theta1,Coverage90Theta1)#
#
write.table(Table,file="/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure4_SupplementaryFigure4/RelativeBiasMeanMedianModeHomoplasy.txt",sep="\t")
Coverage50P
Coverage75P
Coverage90P
Coverage50DH
Coverage75DH
Coverage90DH
Coverage50MSH
Coverage75MSH
Coverage90MSH
#### Mean vs Median vs Mode estimations#
Directory <- c("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set2/","/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set3/","/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure3_SupplementaryFigure3/Results/Set4/")#
#
#Title <- c(expression(paste("A) ",tau," = 3")), expression(paste("B) ",tau," = 6")), expression(paste("C) ",tau," = 9")))#
Title <- c("A)","B)","C)")#
YLab <- c(paste(expression(Theta_1)," (real value = 30)"),paste(expression(Theta_1)," (real value = 30)"),paste(expression(Theta_1)," (real value = 30)"))#
#
Ylimits <- c(14,5.5,5.5)#
AbLinePlace <- c(30,30,30)#
AbLinePlaceTau <- c(3,6,9)#
#
pdf("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure4_SupplementaryFigure4/SuppFigureS5.pdf")#
par(mfrow=c(3,2), mar=c(3,6,4,1))#
#
VectorLabels#
#
require("beanplot")#
#
Coverage50 <- c(0,0,0)#
Coverage75 <- c(0,0,0)#
Coverage90 <- c(0,0,0)#
#
Coverage50Theta1 <- c(0,0,0)#
Coverage75Theta1 <- c(0,0,0)#
Coverage90Theta1 <- c(0,0,0)#
#
Coverage50P <- c(0,0,0)#
Coverage75P <- c(0,0,0)#
Coverage90P <- c(0,0,0)#
#
Coverage50MSH <- c(0,0,0)#
Coverage75MSH <- c(0,0,0)#
Coverage90MSH <- c(0,0,0)#
#
Coverage50DH <- c(0,0,0)#
Coverage75DH <- c(0,0,0)#
Coverage90DH <- c(0,0,0)#
#
Coverage50Median <- c(0,0,0)#
Coverage75Median <- c(0,0,0)#
Coverage90Median <- c(0,0,0)#
#
RelativeBiasTau <- c(0,0,0)#
RelativeBiasMeanTau <- c(0,0,0)#
RelativeBiasMedianTau <- c(0,0,0)#
#
RelativeBiasTheta1 <- c(0,0,0)#
RelativeBiasMeanTheta1 <- c(0,0,0)#
RelativeBiasMedianTheta1 <- c(0,0,0)#
#
RelativeBiasP <- c(0,0,0)#
RelativeBiasMeanP <- c(0,0,0)#
RelativeBiasMedianP <- c(0,0,0)#
#
RelativeBiasDH <- c(0,0,0)#
RelativeBiasMeanDH <- c(0,0,0)#
RelativeBiasMedianDH <- c(0,0,0)#
#
RelativeBiasMSH <- c(0,0,0)#
RelativeBiasMeanMSH <- c(0,0,0)#
RelativeBiasMedianMSH <- c(0,0,0)#
#
MainLabels = c("A)","C)","E)")#
MainThetaLabels = c("B)","D)","F)")#
#
for (j in 1:3){#
    setwd(Directory[j])#
    P <- c()#
    MSH <- c()#
    DH <- c()#
    P_estimate <- c()#
    MSH_estimate <- c()#
    DH_estimate <- c()#
    Pmean_estimate <- c()#
    MSHmean_estimate <- c()#
    DHmean_estimate <- c()#
    Pmedian_estimate <- c()#
    MSHmedian_estimate <- c()#
    DHmedian_estimate <- c()#
    real_tau <- c()#
    real_theta0 <- c()#
    real_theta1 <- c()#
    tau_ABC <- c()#
    meantau_ABC <- c()#
    mediantau_ABC <- c()#
    theta0_ABC <- c()#
    theta1_ABC <- c()#
    meantheta1_ABC <- c()#
    mediantheta1_ABC <- c()#
    number_archives <- 1:100#
    Quantilestau <- matrix(,ncol=7,nrow=0)#
    Quantilestheta1 <- matrix(,ncol=7,nrow=0)#
    QuantilesMeantau <- matrix(,ncol=7,nrow=0)#
    QuantilesMeantheta1 <- matrix(,ncol=7,nrow=0)#
    QuantilesMediantau <- matrix(,ncol=7,nrow=0)#
    QuantilesMediantheta1 <- matrix(,ncol=7,nrow=0)#
#
    for (i in number_archives){#
        archive <- paste(i,".out",sep="")#
        dat <- read.table(archive,header=T)#
        rows <- nrow (dat)#
        print (i)#
        print (rows)#
        print (dat$Acceptancenum[10000])#
        u = 5.5 *( 10^(-5))#
        L=6#
        Theta1= dat$T1#
        N=Theta1/(2*L*u)#
        tMS=dat$Time#
        timeMS = tMS*2*N#
        timeAR = (2*L*u)*timeMS#
        d <- density(timeAR)#
        Quantilestau <- rbind(Quantilestau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMeantau <- rbind(QuantilesMeantau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMediantau <- rbind(QuantilesMediantau,quantile(timeAR,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        tau_ABC[i] <- d$x[d$y==max(d$y)]#
        meantau_ABC <- c(meantau_ABC, mean(timeAR))#
        real_tau[i] <- 3#
        d <- density(dat$T1)#
        theta1_ABC[i] <- d$x[d$y==max(d$y)]#
        meantheta1_ABC <- c(meantheta1_ABC,mean(dat$T1))#
        Quantilestheta1 <- rbind(Quantilestheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMeantheta1 <- rbind(QuantilesMeantheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        QuantilesMediantheta1 <- rbind(QuantilesMediantheta1,quantile(dat$T1,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95)))#
        d <- density(dat$SASHloc)#
        MSH_estimate[i] <- d$x[d$y==max(d$y)]#
        MSHmean_estimate[i] <- mean(dat$SASHloc)#
        MSHmedian_estimate[i] <- median(dat$SASHloc)#
        d <- density(dat$SASH)#
        P_estimate[i] <- d$x[d$y==max(d$y)]#
        Pmean_estimate[i] <- mean(dat$SASH)#
        Pmedian_estimate[i] <- median(dat$SASH)#
        d <- density(dat$SHdist)#
        DH_estimate[i] <- d$x[d$y==max(d$y)]#
        DHmean_estimate[i] <- mean(dat$SHdist)#
        DHmedian_estimate[i] <- median(dat$SHdist)#
        real_theta1[i] <- 30#
        real_theta0[i] <- 0.03#
        homoplasy_archive <- paste(i,"homoplasy.txt",sep="")#
        homoplasy <- read.table(homoplasy_archive,header=T)#
        MSH[i] <- homoplasy$Sizehomoplasyloc#
        P[i] <- homoplasy$SASH#
        DH[i] <- homoplasy$SHdist#
        QuantilesMSH <-quantile(dat$SASHloc,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
        QuantilesDH <-quantile(dat$SHdist,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
        QuantilesP <-quantile(dat$SASH,probs=c(0.05,0.125,0.25,0.5,0.75,0.875,0.95))#
        if ((P[i] >QuantilesP[3]) && (P[i] < QuantilesP[5])){#
        Coverage50P[j] <- Coverage50P[j] + 1#
        }#
        if ((P[i] >QuantilesP[2]) && (P[i] < QuantilesP[6])){#
            Coverage75P[j] <- Coverage75P[j] + 1#
        }#
        if ((P[i] >QuantilesP[1]) && (P[i] < QuantilesP[7])){#
            Coverage90P[j] <- Coverage90P[j] + 1#
        }#
        if ((MSH[i] >QuantilesMSH[3]) && (MSH[i] < QuantilesMSH[5])){#
            Coverage50MSH[j] <- Coverage50MSH[j] + 1#
        }#
        if ((MSH[i] >QuantilesMSH[2]) && (MSH[i] < QuantilesMSH[6])){#
            Coverage75MSH[j] <- Coverage75MSH[j] + 1#
        }#
        if ((MSH[i] >QuantilesMSH[1]) && (MSH[i] < QuantilesMSH[7])){#
            Coverage90MSH[j] <- Coverage90MSH[j] + 1#
        }#
        if ((DH[i] >QuantilesDH[3]) && (DH[i] < QuantilesDH[5])){#
            Coverage50DH[j] <- Coverage50DH[j] + 1#
        }#
        if ((DH[i] >QuantilesDH[2]) && (DH[i] < QuantilesDH[6])){#
            Coverage75DH[j] <- Coverage75DH[j] + 1#
        }#
        if ((DH[i] >QuantilesDH[1]) && (DH[i] < QuantilesDH[7])){#
            Coverage90DH[j] <- Coverage90DH[j] + 1#
        }#
    }#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,3]) && (AbLinePlaceTau[j] < Quantilestau[i,5])){#
            Coverage50[j] <- Coverage50[j] + 1#
        }#
    }#
#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,2]) && (AbLinePlaceTau[j] < Quantilestau[i,6])){#
            Coverage75[j] <- Coverage75[j] + 1#
        }#
    }#
#
    for (i in 1:100){#
        if ((AbLinePlaceTau[j] >Quantilestau[i,1]) && (AbLinePlaceTau[j] < Quantilestau[i,7])){#
            Coverage90[j] <- Coverage90[j] + 1#
        }#
    }#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,3]) && (30 < Quantilestheta1[i,5])){#
        Coverage50Theta1[j] <- Coverage50Theta1[j] + 1#
    }#
}#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,2]) && (30 < Quantilestheta1[i,6])){#
        Coverage75Theta1[j] <- Coverage75Theta1[j] + 1#
    }#
}#
#
for (i in 1:100){#
    if ((30 >Quantilestheta1[i,1]) && (30 < Quantilestheta1[i,7])){#
        Coverage90Theta1[j] <- Coverage90Theta1[j] + 1#
    }#
}#
    RelativeBiasTau[j] <- mean((tau_ABC-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
    RelativeBiasMeanTau[j] <- mean((meantau_ABC-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
    RelativeBiasMedianTau[j] <- mean((Quantilestau[,3]-AbLinePlaceTau[j])/AbLinePlaceTau[j])#
#
    RelativeBiasTheta1[j] <- mean((tau_ABC-30)/30)#
    RelativeBiasMeanTheta1[j] <- mean((meantau_ABC-30)/30)#
    RelativeBiasMedianTheta1[j] <- mean((Quantilestau[,3]-30)/30)#
    RelativeBiasP[j] <- mean((P_estimate-P)/P)#
    RelativeBiasMeanP[j] <- mean((Pmean_estimate-P)/P)#
    RelativeBiasMedianP[j] <- mean((Pmedian_estimate-P)/P)#
    RelativeBiasMSH[j] <- mean((MSH_estimate-MSH)/MSH)#
    RelativeBiasMeanMSH[j] <- mean((MSHmean_estimate-MSH)/MSH)#
    RelativeBiasMedianMSH[j] <- mean((MSHmedian_estimate-MSH)/MSH)#
    RelativeBiasDH[j] <- mean((DH_estimate-DH)/DH)#
    RelativeBiasMeanDH[j] <- mean((DHmean_estimate-DH)/DH)#
    RelativeBiasMedianDH[j] <- mean((DHmedian_estimate-DH)/DH)#
#
    Navascues_data <- read.table("tauNavascues.txt")#
    tau_Navascues <- Navascues_data[,3]#
    Theta0_Navascues <- Navascues_data[,1]#
    Theta1_Navascues <- Navascues_data[,2]#
    Arlequin_data <- read.table("resultadosarlequin.txt",header=T)#
    tau_Arlequin <- Arlequin_data$tau#
    Theta0_Arlequin <- Arlequin_data$theta0#
    Theta1_Arlequin <- Arlequin_data$theta1#
    # beanplot(tau_Arlequin,tau_Navascues,tau_ABC,names=c("LSWH","MPH","ABC"),ylab=YLab[j],main=Title[j],col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0, cex.lab = 2, cex.main = 2, cex.axis = 2,overallline=AbLinePlace[j])#
    SlightlyUp <- max (c(Quantilestau[,3],meantau_ABC,tau_ABC)) + 0.2 * max (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
    SlightlyTextUp <- max (c(Quantilestau[,3],meantau_ABC,tau_ABC)) + 0.0 * max (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
    SlightlyDown <- min (c(Quantilestau[,3],meantau_ABC,tau_ABC))#
#
    boxplot(Quantilestau[,3],meantau_ABC,tau_ABC, cex.lab = 3, cex.main = 3, cex.axis = 2,ylab=expression(tau), ylim = c(SlightlyDown,SlightlyTextUp), main = MainLabels[j])#
    abline(h=AbLinePlaceTau[j],lty="dashed")#
    mtext("Median", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    mtext("Mean", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    mtext("Mode", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    text(1,SlightlyTextUp,round(RelativeBiasMedianTau[j],3),cex=1.5)#
    #    text(2,SlightlyTextUp,round(RelativeBiasMeanTau[j],3),cex=1.5)#
    #    text(3,SlightlyTextUp,round(RelativeBiasTau[j],3),cex=1.5)#
#
    SlightlyUp <- max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC)) + 0.2 * max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
    SlightlyTextUp <- max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC)) + 0.05 * max (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
    SlightlyDown <- min (c(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC))#
#
    boxplot(Quantilestheta1[,3],meantheta1_ABC,theta1_ABC, cex.lab = 3, cex.main = 3, cex.axis = 2,ylab=expression(theta[1]), ylim = c(SlightlyDown,SlightlyTextUp), main = MainThetaLabels[j])#
    abline(h=AbLinePlace[j],lty="dashed")#
    mtext("Median", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    mtext("Mean", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    mtext("Mode", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    text(1,SlightlyTextUp,round(RelativeBiasMedianTheta1[j],3),cex=1.5)#
    #    text(2,SlightlyTextUp,round(RelativeBiasMeanTheta1[j],3),cex=1.5)#
    #    text(3,SlightlyTextUp,round(RelativeBiasTheta1[j],3),cex=1.5)#
#
# boxplot(log10(Theta1_Arlequin),log10(Theta1_Navascues),log10(theta1_ABC),ylab=expression(theta[1]),main=Title[j], cex.lab = 3, cex.main = 3, cex.axis = 2, ylim=c(0,Ylimits[j]),yaxt="n")#
    if (j> 1){#
        #axis(2,at=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14),labels=c(expression(10^1),expression(10^2),expression(10^3),expression(10^4),expression(10^5),expression(10^6),expression(10^7),expression(10^8),expression(10^9),expression(10^10),expression(10^11),expression(10^12),expression(10^13),expression(10^14)),cex.lab=2, cex.axis=2, cex = 2)#
    }else{#
        # axis(2,at=c(1,5,9,13),labels=c(expression(10^1),expression(10^5),expression(10^9),expression(10^13)),cex.lab=2, cex.axis=2, cex = 2)#
    }#
    #mtext("Tau (real value = 3)", WEST <- 2, at = 3, line = 2, cex = 2)#
    #    mtext("LSWH", SOUTH <- 1, at = 1, line = 2, cex = 1.5)#
    #    mtext("MPH", SOUTH <- 1, at = 2, line = 2, cex = 1.5)#
    #    mtext("ABC", SOUTH <- 1, at = 3, line = 2, cex = 1.5)#
    #    abline(a=log10(AbLinePlace[j]),b=0,lty=2)#
}#
dev.off()#
#
Table <- cbind(RelativeBiasTau,RelativeBiasMeanTau,RelativeBiasMedianTau,RelativeBiasTheta1,RelativeBiasMeanTheta1,RelativeBiasMedianTheta1,RelativeBiasP,RelativeBiasMeanP,RelativeBiasMedianP,RelativeBiasMSH,RelativeBiasMeanMSH,RelativeBiasMedianMSH,RelativeBiasDH,RelativeBiasMeanDH,RelativeBiasMedianDH,Coverage50,Coverage75,Coverage90,Coverage50Theta1,Coverage75Theta1,Coverage90Theta1,Coverage50P,Coverage75P,Coverage90P,Coverage50DH,Coverage75DH,Coverage90DH,Coverage50MSH,Coverage75MSH,Coverage90MSH)#
#
write.table(Table,file="/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/Pinero/Articulo_homoplasia/Articulo/VersionesDeArticulo/HomoplasyPaperFigures/Figures/Figure4_SupplementaryFigure4/RelativeBiasMeanMedianModeHomoplasy.txt",sep="\t")
